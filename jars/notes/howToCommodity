so you want to add a item or commodity to the game, but don't know were to begin, or simply cant understand one small step of the process?
well, don't worry! I am here to guid you though this task.
in this tutorials, we will cover the following:
1) how to add a item to the game
    -what the requirements are for a items sprite
    -how the CSV file works, and what every variable in it means, and how to set yours up.
    -how to give your item a description
2) multiple methods of how to make a item show up in game
    -adding a item to the in game economy, and how that effects were the item is sold in markets
    -how to add items to the players inventory with code
3) how to change your items description and picture dynamically (based on how literally anything you could think of)
    -changing a commodity picture.
    -adding text to a items description
    -adding 'F1 to show more' text to your items description
4) and maybe latter, we can talk about 'special items' but not now sorry


# requirements for a sprite:
so, the requirements are as follows:
1) *the image size should be 100 by 100 pixels or less.*
although you can have images larger then this, it will be larger then the 'box' that you can put a given commodity in and will look weired.
also, feel free to have images smaller then this. the game seems to handle even weird height/width ratios well enough in my experience
2) *the image should have a transparent background.*
although you can neglect this rule if you want, It will result in your item being very obviously different from the rest of the game. especially whenever you try to pick the image up.

besides the 2 rules both, there are not 'requirements' for a sprite. although even the 2 rules I describe can be broken, if you really really want to.

I am not a spiriting expert, so if you don't know how to resize a given image, or how to make a background transparent, i found 2 tutorials for gimp here:
cropping(1:44) and resizing(4:00) a image: https://www.youtube.com/watch?v=dQSlqcMCKx0&t=253s&ab_channel=DoiT8
adding a transparent background: https://www.youtube.com/watch?v=nl2uqKqbryo&ab_channel=EZTutorials

# were to put your sprite
now that you have a sprite, you need to put it somewhere the game can access.
enter your mod folder, and create a folder named 'graphics'. inside that folder, create another folder named 'icons'. and inside that, create yet another folder named 'cargo'
(please note: you can put your images anywhere in your mods folder, but this is the way most mods are structured, and the base game is structured. so it can help to organize yourself using others organization technics if you plan on your mod having a lot of things in it.)
from there, put the sprite you intend to use in the newly created 'cargo' folder. your setup should look something like this:
-->image 000 here<--
please take note of the name given to my sprite. most mods structure there sprites and other not player visible names to have a name like 'myModsName_WhatThisImageRepresentsName'. (were 'myModName' is the name of your mod, and 'WhatThisImageRepresentsName' is the in game name of whatever this image is suppose to be)
you can use always use a different naming structure of course. but if by chance another mod happens to add a image of the same name, at the same location, Weather your mod or theres might end up using the wrong image, and that can be... uncomfortable.
now that you have a image set up in your mod, we can move onto the interesting parts:

# the commodities.csv file
so the first thing we need to do is set up the location were the commodities.csv file will go. unlike were your image goes, this is extremely important. if you put this file in the wrong location, starsector will not read it.
enter your mod folder, and create a folder named 'data'. inside that folder, create another folder named 'campaign'.
now, we are going to get a commodity.csv file. because building one ourself is frustrating, im just going to go into the starsector-core and copy theres.
so in the 'starsector\starsector-core\data\campaign folder, and find the file called commodities.csv
-->image 001 here<--
now copy and past it into your own mods data\campaign folder
-->image 002 here<--
now we need to open it. i use a editor called 'Rons CSV Editor' to open such files, but you might have your own way of opening them.
-->image 003 here<--
wow. there is a lot of junk here. feel free to look around at everything, if you want, and try to guess what all the different stats do. I will of corse exsplain them all later.
what i want to do right now, is delete every line below 'supply'. to clean it up a little.
(in Rons CSV Editor, I don't know about others) you can do this by clicking on the numbers on the right, then dragging your mouse down to select multiple lines. then pressing the backspace button
-->image 004 here<--
mush more clean!
now, we are going to edit the 'Supplies' name and add a # in front of it. this will make the code ignore that inter commodity, so we don't mess with the base games supply somehow by mistake.
next, we are going to insert a new line both the supply (in Rons CSV Editor) this can be done by right clicking anywhere on the line were the supply's are, and pressing the 'insert row(s) above' option
your CSV file should look like this:
-->image 005 here<--
so, now we can start to fill out all the boxes so we can have our commodity
as we do, i am going to talk about what each and every box does, and what you mgiht want to put into it
1) name: the name of your commodity is the name that it will be referred to in game.
    -im going to write: 'Combat Lobster' because: that's what i want this to be called.

2) id: the id is how the game will remember your commodity. -not- to be confused with the 'name' of your commodity
    also note: if your save game has a item of this ID, and you change it (and no other mod or the base game has a commodity of this ID), your game will crash. so please remember that.
    -im going to write: 'LobsterCombatant_CombatLobster' because: I want to follow this equation: modName_commodityName, to avoid other mods from having the same commodityID as me (wish would cause my lobster to override theres, or theres to override mine)

3) demand class: is what the economy will see this commodity as. this should always be equal to a commodity 'id', unless you want the game to pretend its a different commodity (for the sake of economy simulation) (example: 'Volturnian Lobster' is in the 'luxury_goods' demand class, so it acts like a 'luxury_goods' for the sake of economy simulation)
    -im going to write: 'LobsterCombatant_CombatLobster' because: I want my commodity to act as its own thing

4) base price: this is how mush it generally costs to buy this item from markets (before tariffs)
    -im going to write: '250' because: that's how many credits i want one to cost

5) export value: this is how many credits a single unit of demand (on a colony) adds to the global market share for this commodity
    -im going to write: '500' because: I want my lobsters to be somewhat valuable.

6) price variability: this is how mush the price of this commodity in markets can vary depending on demand. so setting it to 3 means the commodity can be 3X the price, or 1/3 the price. at the most extreme.
    note: im not 100% sure on my equation there, but i do know that this is what this does
    -im going to write: '3' because: that's what every other commodity in the game has (that can be brought or sold), and i see no reason to have this cost a different amount

7) utility: How much demand one unit of the commodity satisfies. it is recommended to keep this at 1 most of the time.
    -im going to write: '1' because: I see no point in setting it to anything else

8) origin: probably does nothing, but at some point there was an idea for having exotic commodities that cost more further away from their "origin", still, it might do nothing
    -im going to leave this blank because I see no reason to use this

9) tags: a 'tag' is something that can be attached to a commodity, and can be read by the game or mods. you can add as many tags to a given commodity as you like, but a tag can change a lot of things, so make sure you know what your doing first
    -im going to write: 'military' because: a combat lobster should be 'military'.
    tags that exsist, and there functions, but only as far as i can tell. I miss things sometimes:
    1) military
        the military tag does a few things:
        1) it makes the commodity show up in the military market
        2) it prevents you from trading it in the milatary sub market unless your relations are at least 'FAVORABLE'
        3) makes it so selling this commodity on a market has a increased 'impact' (although, im unsure of what this means)
    2) expensive
        -some commodity based missions will prefer to give you missions based around commodity's with this tag
    3) crew
        -excludes this commodity from participating in procurement missions.
        might be used latter for something else, but its not yet.
    4) personnel
        governs if a commodity uses personnel slots, but only in NPC trade fleets??? (so it effectively does nothing)
    5) marines
        -excludes this commodity from participating in procurement missions.
        might be used latter for something else, but its not yet.
    6) food
        -probably unused for now. might be used latter
    7) medical
        -this is used in getting who you contact in a trade mission. (CITIZEN, or POST_MEDICAL_SUPPLIER. depending on i dont know.)
    8) luxury
        -this is used in getting who you contact in a trade mission. (civ or pirate, depending on if this commodity is legal or not)
    9) exotic
        -probably unused for now. might be used latter
    10) meta
        -prevents you from raiding this item from markets?
    11) nonecon
        -prevents you from raiding this item from markets?
        -excludes this commodity from participating in procurement missions.
        -prevents you from putting this item into your personal stockpile on your own markets.
    12) ai_core
        -lets you assing this item to the AI core sloot at a market
    13) no_loss_from_combat
        -prevents the player from losing this item
    14)no_drop
        -I think this prevents you from getting this item? I don't know though, because i could not find the code for it.
    15)nosell
        -this tag exists in the code, but i cant find were its used. It might be unused

10) stack size: does nothing anymore. used to determine stack size
    -im going to write: '0' because: it is no longer used

11) cargo space: the amount of cargo space each item takes in your cargo bay.
    -im going to write: '1' because: I think that's fine (you can set it to any number you like though. like 0.01. or 9001 or 0. whatever you think will be fun)

12) icon: the path to the sprite that this commodity uses.
    -im going to write: 'graphics/icons/cargo/LobsterCombatant_LobsterFighter.png' because: that's the path to my file (and the name of my image)
    -if you put your file somewhere else in your mods folder, you will need to write a path to it. and if your image has a different name then mine (and it should) you will need to write that name instead of my images name

13) sound id: the sound this commodity plays when you pick it up
    -im going to write: 'ui_cargo_volturn_lobster because': that's the lobster sound, and i want to use it (feel free to copy any sound from the commodities.csv file)

14) sound id drop: the sound this commodity plays when you put it down.
    -im going to write: 'ui_cargo_volturn_lobster_drop' because: that's the lobster sound, and i want to use it (feel free to copy any sound from the commodities.csv file)

15) order: the order this item will try to be sorted into when you sort your cargo bay. lower numbers means it will be more towards the top right, lower numbers mean it will be more towards the bottom left.
    -im going to write: '3' because: I felt like that was a good number? you can mess with this and see were you want your item to end up in your lists

16) economyTier: The order in which the economy simulation runs. Stuff lower on the production ladder (e.g. ore) needs to have a lower tier than the stuff that's made from it (i.e. metals) to have the simulation stabilize more quickly.
    -im going to write: '1' because: I plan to have this commodity require nothing to be produce

17) econUnitOrigUnused: this does nothing right now
    -im going to write: '0' because: this does nothing

18) econUnit: effects how many units of this commodity are available at a market (per output)
    -im going to write: '150' because: I like the number

19) baseRaidDanger: how mush more dangerous this commodity is to raid compared to others. can be left blank for LOW danger, i think.
    the accepted values of this are:
       MEDIUM
       HIGH
       EXTREME
    -im going to write: 'MEDIUM' because: the lobsters might fight back. (for most things, you should leave this blank.)

20) eU * base value: this is quite literally, what you put in the 'econUnit' slot * by what you put in the 'base price' slot
    -im going to write: '37500' because: 150 * 250 = 37500 (and 150 and 250 is what i put in the 'econUnit' and 'base price' slot, respectively)

21) iconWidthMulti: how close together your icons are on the market screen. smaller values are good for icons that are more tall then wide. higher values can sometimes be useful for wider commodity.
    -im going to write: '1' because: I copied the 'Volturnian Lobster' stats for this.

22) plugin: this does nothing, as far as i can tell.
    -im going to leave this blank because: this does nothing

23) desc: this does nothing. a forgotten bit of data from a lost age. if you want to add descriptions to your items, i will show you soon.
    -im going to leave this blank because: this does nothing

now after setting up all the varubles there (or just copying something from the base games commodity.csv file, and changing the id to something different) your commodities.CSV file should look something like this:
-->image 006 here<--

FAQ:
    Q: how do i make my commodity take crew space, or space in my fuel tanks
    A: as far as i can tell, there is no way to do so. maybe someday we will find a way.

    Q: I want to make my commodity make a custom sound when you pick it up / drop it
    A: I dont know how sounds work, to my shame. however, what i do know is:
        1) there is a sounds.json in the config folder of starsector-core that you could look at
            -the sound ID that you input into the 'sound id' and 'sound id drop' are found here, and link to a file in the 'sounds' folder found in starsector core.
        2) there is a sounds folder in the starsector-core that you could look at.
            -the sounds themselfs are found here.
        if you want to structure your mod like the main starsector (don't know if its important or not) create a sound folder in your mod folder, and create a sounds.json in your /data/config folder.
        if you look at the sounds.json structure, you should be able to understand it (although it might be easier to learn from mods with less sounds)


we are now going to check out our commodity in game. so lets save and close the CSV file
i advice you to download and install the 'console commands' mod (https://fractalsoftworks.com/forum/index.php?topic=4106.0) for this part, so you can test out your commodity
enable the game, and press 'CTRL' + 'SHIFT' + 'BACKSPACE' to open the console commands
then type in the following command:
'addItem commodityID'
were 'commodityID' is replaced with the ID of your new commodity you added to your CSV file
and if all went well, there it is!
-->image 007 here<--
but wait, if we move our mouse over the commodity, as some of you may have exspected...
-->image 008 here<--
there is no description!

# the descriptions.csv file
now we need to add a description to our commodity. and there are a few ways to do this. we will be starting with the descriptions.csv file.
first, go into your mods data folder, and create a new folder named 'strings'
from there, we are going to go into starsector\starsector-core\data\strings and copy and past its own 'descriptions.csv' file into our newly created string folder
your new strings folder should now look something like this:
-->image 009 here<--
now we are going to open the newly copyed CSV file. and then we are going to deleat every line but the one at the top, and the catagory line
your CSV file should now look like this:
-->image 010 here<--
now, we are going to start to change this to match out own commodity.
first, change the id section to say your commodity id (so i would change 'lightmg' to say 'LobsterCombatant_CombatLobster')
second, change the type section to say 'RESOURCE' (so i would change 'WEAPON' to say 'RESOURCE') (also, the reason for this is to let the game know that this is looking for a commodity. it -will not- work if it says anything else, because you have a commodity that you want to have a description)
lastly, change the text1 section to say.. whatever you want your description to be (so i would change... i bunch of text to say 'mean, lean, fighting lobster')
and that's it! your new description is completed. here what mine looks like for refrence:
-->image 011 here<--
also, ignore all the other sections (text2,text3,text4,notes) they are not needed here
if you start up the game, and give yourself one of your commodity again, it should look like this
-->image 012 here<--
and thats all for the basic of descriptions.

# advanced descriptions
in this section, we are going to cover something slightly more advanced for the first time.
if all you want to do is make a commodity and have it in game, skip this section.
if you for some reason want the following:
1) highlights in your description
2) the ability to change your description with code
3) the ability to change what is displayed when your press f1
then please read this section

so for advanced descriptions we are going to need 3 things:
1) create a new class and name it 'modName_CommodityTooltipModifier' were 'modName' is the name of your mod.
   next, make the new class 'implements CommodityTooltipModifier'
   your new class should look like this:
   -->image 13 here<--
2) in your main java class (the one your mod_ingo says is your 'modPlugin')
   add the following function:
   @Override
   public void onGameLoad(boolean newGame) {
       super.onGameLoad(newGame);
   }
   your modPlugin should look something like this:
   -->image 14 here<--
3) add your newly created 'modName_CommodityTooltipModifier' class as a transient listener. (note, you can make it none transient if you want it to rembmer data, but if you do, I advice you to make sure you dont add one if the listiner is already present (make it so it only adds if new game is true or something maybe?))
    you can use the following function to add such a listiner:
    Global.getSector().getListenerManager().addListener(new modName_CommodityTooltipModifier(),true);
    now your modPlugin should look something like this:
    -->image 15 here<--

and that it! the hard part is done.
now its time to write your description. i will show you a simple example, but for more advanced things (like images, or crazy things) you will need to look up how to use the 'TooltipMakerAPI' on your own.
-->image 16 here<--
so, i would like to explain a few things about this.
1) line 15 is so this code will only effect the one commodity. if i didn't have that if statement, this would effect every stack of items in the game.
2) line 17 and 18 show how to create and highlight text. the text i want to highlight will always replace the %s in the first inputted text. this lets you have things like variables, instead of just static strings be added to your descriptions
3) line 21-23 show how to display text only when the text is 'expanded'.
now for showing it in game:
not expanded:
-->image 17 here<--
expanded:
-->image 18 here<--
and that's all for 'advanced' descriptions. simple i hope.

# Implementation
so you made it. and now we are here.
the question that must be asked, the one you have felt, silently at the back of your mind:
'how do i actually see this in game without commands'
and oh boy.. im glad you asked.
there are 3 ways to see a commodity in game without commands:
1) by adding it to loot tables:
2) by adding it to the players cargo with code:
    Global.getSector().getPlayerFleet().getCargo().addCommodity("LobsterCombatant_CombatLobster",100);
    you can replace the "LobsterCombatant_CombatLobster" with the ID of the commodity you want to add, and the 100 with how many of said item you want to add
    this can be useful when giving rewards for quests and, or other events.
    you can also use the addCommodity("LobsterCombatant_CombatLobster",100); function on any cargo in existence, if you so desire.
3) by adding it to a markets supply and/or demand (and therefore, a markets sub markets).
    with this, there are a few ways to go about it:
        1) replacing a industry so it makes your commodity.
        2) creating a new industry that makes your commodity.
        3) adding your commodity to a industry supply / demand remotely
    I will go over each of the options here in soon, but i will focus on number 3. the others will only get a quick description, or we will be here all day.
    1) replacing a industry:
        if you want to know how to replace a industry...
        1) copy the industry.csv file (placing it in the data\campaign folder of your mod folder),
        2) delete everything but the industry you want to replace,
        3) change the plugin to something in your own mod, that extends the previous plugin (if you dont know what the previus plugin was, its in the plugin section. it should be after the last '.' in the line),
        4) then in the apply() function (that you should override) run both super.apply(); the following command:
           supply("LobsterCombatant_CombatLobster",5);
            you can replace the "LobsterCombatant_CombatLobster" with the ID of your commodity.
            you can replace the '5' with the amount of this commodity you want this market to produce.
            please keep in mind: most commodity output increases with market size. so its wise to use an equation like:
            supply("LobsterCombatant_CombatLobster",market.getSize() - 1);
            (so the industry will produce '2' at size '3', '3' at size '4', '5' at size '6', and so on)
            (you can also do the same thing for the demand a industry has with the 'demand("LobsterCombatant_CombatLobster",5)' function)
        here's what your CSV could looks like (I overrode the lionsguard industry)
        -->image 19 here<--
        please pay attention to the plugin section. its the only section i changed, and the only one you need to change with this method.
        here's what your code should look like
        -->image 20 here<--
        this is what your code should look like, although what 'supply' you are adding, and what class you are 'extend' might be different
        we can even see the changes in game!
        -->image 21 here<--
        -->image 22 here<--
        please note this method has some issues:
        1) if anyone else try's to do the same thing to the same industry, one of your plugins is going to be overwritten, wish can cause issues

    2) creating your own industry
        if you want to create your own industry for your commodity.. it has less isuees, but can be a pain.
        1) copy the industry.csv file (placing it in the data\campaign folder of your mod folder),
        2) delete everything but the industry you want that you think costs an OK amount,
        3) change the plugin to something in your own mod, that extends BaseIndustry,
        4) then in the apply() function (that you should override) run the following command:
           supply("LobsterCombatant_CombatLobster",5);
            you can replace the "LobsterCombatant_CombatLobster" with the ID of your commodity.
            you can replace the '5' with the amount of this commodity you want this market to produce.
            please keep in mind: most commodity output increases with market size. so its wise to use an equation like:
            supply("LobsterCombatant_CombatLobster",market.getSize() - 1);
            (so the industry will produce '2' at size '3', '3' at size '4', '5' at size '6', and so on)
            (you can also do the same thing for the demand a industry has with the 'demand("LobsterCombatant_CombatLobster",5)' function)
        here's what your CSV could looks like (I used the lions guard industry as my base)
        -->image 23 here<--
        this time, instead of only changeing the plugin, i also changed the id,name, and description
        although, you technically only need to change the plugin and id for this to work, it can get confusing for players if you don't at least also change the name.
        here's what your code should look like
        -->image 24 here<--
        this is what your code should look like, although what 'supply' you are adding, and your classname might be different
        we can even see the changes in game!
        -->image 25 here<--
        -->image 26 here<--

    and that's all i will be talking about, in relation to creating and modifying industry in this tutorial.
    if i find/create some good tutorials on how to do this, i will likely put them -->here<--

    now to the thing i wanted to teach:
    3) adding supply and demand without overriding or creating industry:
        this is... different. it can cause lag, but it allows for the ability to add supply and demand without worrying about your code being overridden.
        also, normal when doing something like this, i use the marketRetrofits library, as it has a lot of things to help me run code more efficiently, but im not ready to create even a basic tutorial on how to use that yet, so here we are.
        so, lets get started! I will try to explain what we are doing as we move along:
        1) create a new class, and make sure it 'implements EconomyAPI.EconomyUpdateListener'. also, add the functions it wasnts you to.
           -->image 27 here<--
        2) now add this newly created class as a 'UpdateListener' useing the following command:
            Global.getSector().getEconomy().addUpdateListener(new modName_BaseCampaignEventListener());
            now your modplugin should look something like this:
            -->image 28 here<--
        3) and now for the fun part! adding supply or demand to a industry. for this, go back to the class you made (the one that implements the 'EconomyAPI.EconomyUpdateListener' class).
            so, what you need to do here can vary a lot depending on what you are going to do, so im going to show a few examples, slowing increasing in complexity and function as we move along

            @Override
            public void economyUpdated() {
                //making everything a variable for your convenience. just the values here for basic changes.
                String commodity = "LobsterCombatant_CombatLobster";
                String industry = "lionsguard";
                String source = "LobsterCombatant_BaseCampaignEventListener";
                //this for loop runs over every market in the game
                for (MarketAPI market : Global.getSector().getEconomy().getMarketsCopy()){
                    //this if statment prevents crashes if you try to get a industry that doe snot exsist.
                    if (market.hasIndustry(industry)){
                        //this line of code adds
                        market.getIndustry(industry).getSupply(commodity).getQuantity().modifyFlat(source, market.getSize()-1);
                    }
                }
            }
