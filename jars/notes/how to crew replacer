[spoiler][/spoiler][img][/img][url][/url][code][/code]

so, you want to know how to use crew replacer, and its true potential?
well, lucky for you, this is the place to be.
in this tutorial we will be discussing:
1)a basic rundown of crew replacer, some common misconceptions and its limits. this includes:
    -why its called crew replacer at all.
    -what a 'crew' is in this context.
    -what is a 'job' in this context
    -what is a 'task' in this context
    -the things crew replacer can do
    -this things crew replacer cant do
1)how to add a crew to crew replacer. this includes:
    basic:
    -crew stats and what they do.
    -how to call a crew to a certain job.
    -how to use crew sets to put a crew in multiple jobs
    -load priority and blacklists, and how they work.
    -how to use crew replaces features, only if crew replacer is present (as such allowing one to use this mod without having it as a dependency)
    -
    advanced:
    //-everything about crews, crew sets, and the basics behind jobs.
    //-how to make your commodity a 'crew' for certain things.
    //-all the crew stats, and how they interact.
    -a overview of what a 'custom crew' is
    -a short description of the safety's installed in crew replacer to make 'custom crew' more stable
    -how each function of a 'custom crew' works
    -how to add your new 'custom crew' to a 'job'.
    -examples.
        -a 'crew' with more power when there is 'volatiles' in the cargo bay.
        -a 'crew' that's available amount is dependent on how many 'marines' you have in your cargo bay
        -a 'crew' that when 'ore' is available, 'ore' is lost when this 'crew' should have been.
        -a 'crew' that has a XP system (like marines)
        -a 'crew' named dave. the legendary doom pirate (with HP, and very high stats)
        -a 'crew' that's actually just a player skill.
        -a 'crew' that's a starship hullmod.
    -how to use crew replaces features, only if crew replacer is present (as such allowing one to use this mod without having it as a dependency)
        -NOTE: when crew replacer is not present, this is required to get custom crew to not crash your game. the basic version of this will not work at all. im sorry but its true.
2)how to add a job to crew replacer, and why you would do it. this includes:
    -shameless self promotion about why crew replacer is great and the benefits of using it.
    -how to make your mod support crew replacer, without making it so the user requires it installed.
    -how to organize your crew sets and job names well, to avoid conflicts.
    -some examples of how you might make one of your modding 'jobs' use crew replacer.



[spoiler=a basic rundown of crew replacer, some common misconceptions and its limits]
[spoiler=why its called crew replacer at all]
the name 'crew replacer' is a kind of relic. when i was first developing this library, my only objective was to create a kind of 'substitute' for crew in certain tasks (like salvaging).
however i quickly realized that 'crew replacer' could be used to change any other commodity in a given task just as easily as 'crew'. so i did it.
so ya. crew replacer is not just for crew. its for every commodity in every event i can edit.
a more appropriate name now in days would be 'commodity task manager' or something, but i quite like crew replacer. so im keeping the name.
[/spoiler]
[spoiler=what a 'crew' is in this context]
a 'crew' in 'crew replacer' does not reference a normal in game 'crew'. it references the 'crewReplacer_Crew' class, wish acts as a representation of a commodity or something else in a 'job'.
a 'crew' has 'stats' built into the class that can be used to determine a 'crew's losses, ability to do things, and the order a 'crew' is used in.
every one of a 'crew's functions are also built to be overridden by modders, allowing for a 'crew' to represent something that's not a commodity, although with some effort (see the 'advanced' section in 'how to add a crew to crew replacer')
[/spoiler]
[spoiler=what is a 'job' in this context]
a 'job' in crew replacer refers to the 'crewReplacer_Job' class. wish acts as a data storage and management for 'crew'. a 'job' generally replaces instances of a single commodity in single task.
this means that in cases were 2 different 'tasks' share a commodity that 'crew replacer' replaces, there will be 2 different 'job's. one for each commodity (example: surveying takes crew. salvaging takes crew. there is 2 'job's one named 'survey_crew' and one named 'survey_crew'. they don't share data at all)
if you want to add a 'crew' to every instance of a commodity crew replacer replaces, you will need to use a 'crew set'. this will be covered in the 'basic' section of 'how to add a crew to crew replacer'
a 'job's functions can be overwritten by modders the same way a 'crew's can. but be careful when you do so, as some of the functions are quite fragile. we will discuss this farther in the 'advanced' section of 'how to add a job to crew replacer, and why you would do it'
[/spoiler]
[spoiler=what is a 'task' in this context]
a 'task' in crew replacer, does not refers to any class or code. rather, it refers to any set of 'job's that all act on the same event.
for example, the 'jobs' 'salvage_crew', and 'salvage_heavyMachinery' both are for salvaging. so the 'task' of 'salvaging' is both of said jobs.
[/spoiler]
[spoiler=the things crew replacer can do]
is this section necessary? maybe replacer it with something else
[/spoiler]
[spoiler=this things crew replacer cant do]
is this section necessary? maybe replacer it with something else
[/spoiler]
[/spoiler]

some useful information that you might want:
[url=https://github.com/Alaricdragon/Crew_Replacer/tree/master/jars/src/desing/documentation]documentation[/url]
[spoiler=how to add a commodity to the game]
[url=https://fractalsoftworks.com/forum/index.php?topic=29612.msg434214#msg434214]Commodity's and you: a basic tutorial on the complete commodity experience[/url]
[/spoiler]

[spoiler=how to add a crew to crew replacer]
[spoiler=basic]
in this part of the tutorial, im going to cover only the most basics of crew replacer. it will only show you how to turn a 'commodity' into a 'crew'. this will likely be a little hand holdy, but i do recommend you read it. i will try to keep this short and to the point.
[spoiler=crew stats and what they do]
crew have 5 base stats, that can be edited. you can change said stats at any time.
[spoiler=String name]
the name of the crew represents the commodityID that this crew represents.
only one crew with a given name can exist in a job at a time. if 2 crews are added to a job with the same name, only one of them will be kept.
[/spoiler]
[spoiler=float crewPriority]
this value determines what order crew will be 'selected' for a job. mostly only effects what crew are lost.
the default value is 10 (there might be a bug i forgot to fix were the value is initialized as 0. this will be changed to 10 at some point, because all my code assumes 10 is the default value. i will remove this line when that is fixed.)
[/spoiler]
[spoiler=float crewLoadPriority]
this value comes into play when 2 crews with the same name are added to a job. when this happens, the one with the highest 'crewLoadPriority' will be kept, and the other discarded.
the default value is 0.
[/spoiler]
[spoiler=float crewPower]
this value represents how 'strong' this crew is at its job. a crew with a crewPower of 2 will be worth twice as mush as normal in job power calculations.
the default value is 1.
[/spoiler]
[spoiler=float crewDefence]
this value represents how resistant to losses this crew is at its job.
a crew with a crewDefence twice as high as its crewPower will take 1/2 the expected losses. one with 1/2 the crewDefence as its crewPower will take twice the number of expected losses.
[spoiler=advanced crewDefence]
it should be noted, in loss calculations, because the code will also calculate what crew was used (based on every crews crewPriority in said job) changing the crewDefence value to not be equal to its crewPower might result in interesting side effects.
example: if you set a crewDefence higher then its crewPower, and you have a job that removes 100% of the crews that are called in a job (example: colonisation uses all the crew, supply, and heavy machinery it calls) this can result in fewer of other crew losses then expected.
example: if you set a crewDefence lower then its crewPower, and you have a job that removes some random % of crew that are called (example: losses from salvaging) this can result in more of other things being removed then expected.
this is a expected and understood behaver, and will not be changed. please feel free to use the mechanics described however you want when designing your crews.
[/spoiler]
the default value is 1. (in cases were you create a new crew, if you only input the crewPower, the crewDefence will be set to the same value as the inputted crewPower.)
[/spoiler]
[/spoiler]
[spoiler=how to call a crew to a certain job]
first of all, im going to be using a commodity i created (that has a ID of 'LobsterCombatant_CombatLobster') as the 'crew' here in this tutorial: [url=https://fractalsoftworks.com/forum/index.php?topic=29612.msg434214#msg434214]Commodity's and you: a basic tutorial on the complete commodity experience[/url]
second, im going to import the crewReplacer.jar from the [url=https://fractalsoftworks.com/forum/index.php?topic=24249.0]crew replacer[/url] mod as a library.
third, im going to review the [url=https://github.com/Alaricdragon/Crew_Replacer/tree/master/jars/src/desing/documentation/jobs]documentation on 'task's and 'job's[url] and determine the job name that i want my crew to use.
now, im thinking my 'combat lobsters' should act as marines in raiding, so im going to add them to the appropriate job now, in my mod plugin, on application load.
[code]
@Override
public void onApplicationLoad() {
    crewReplacer_Main.getJob("raiding_marines").addNewCrew("LobsterCombatant_CombatLobster",1,10);
}
[/code]
now some things to note:
1) the 'onApplicationLoad'. I put my code here. why? because after the 'onApplicationLoad' phase of the game, crew replacer will organize all the relevent data on every single job.
   this is rather important. so, if you want to, for whatever reason, do -anything- with a 'crew' or a 'job' and cant put the code in 'onApplicationLoad' you MUST run the following after you are done making your changes:
   crewReplacer_Main.getJob("raiding_marines").organizePriority();
   (of course, change the inputted job name, to the name of the job you have changed)
   this will reorganize the job, and fix any potential issues that might arise.
2) the 'crewReplacer_Main'. I wont talk about it mush, but its basically a storage for 'jobs' and 'crewSets'. you should always call a 'job' or 'crewSet' through crewReplacer_Main, to avoid issues from hopping in rare cases.
3) the 'getJob'. 'getJob' is just a function that returns a job. feel free to change what is in the "" in this job, to whatever job ID you want.
4) the 'addNewCrew()' 'addNewCrew()' is the goto way to add a crew to a job or a crew set. feel free to replace the "LobsterCombatant_CombatLobster" with the ID of the commodity you want to add to your job.
5) the stats '1,10' is the crewPower and crewPriority. i made my CombatLobsters just as strong as a untrained marine. and they will be deployed at the same time as marines.

now, i dont like the stats, so im going to make some changes.
[code]
@Override
public void onApplicationLoad() {
    crewReplacer_Main.getJob("raiding_marines").addNewCrew("LobsterCombatant_CombatLobster",1.25f,2,0,10);
}
[/code]
what did i do here?
1) well, i increased the 'crewPower' stat to 1.25 (a marine has between 1 and 2 power, depending on there skill level).
2) I also added a new stat, crewDefence, and set it to 2. (a marine i think has between 1 and 1.2? 1.3? I don't remember... crewDefence. (and yes, this is in defiance to how everything else in the game is calculated))
3) I also added another new stat, loadPriority, and set it to the default value (0).
so in effect, the lobster is more capable then a untrained marine, but mush less strong then a fully trained marine. its also extremely tanky by comparison.

if you go into the game, you can actually test and see if this worked. you can be extra sure what you did worked by going somewhere were you can do this job (in my case, finding a planet to raid), and removing all the normal 'crew' from your inventory (in my case, marines) before trying.
[/spoiler]
[spoiler=how to use crew sets to put a crew in multiple jobs (AKA how to crewSet)]
a few things to note:
1) a 'crewSet' is a list of 'crew' that is added to multiple jobs / crewSets.
2) well there is a page in the documentation dedicated to crewSets, thats mostly to document modded crew sets. i will likely redo the base game 'crewSet' documentation sometime.
   what you need to know, is that crew sets follow a simple rule (for all vanilla and modded items)
   -if this 'job' replaces a commodity, it takes 'crew' from the 'crewSet' that's named as that's commodity id.
   what this means is that, if you add a 'crew' to the crewSet named 'ore' every job that represents 'ore' will get that 'crew'. for example.

[code]
@Override
public void onApplicationLoad() {
    crewReplacer_Main.getCrewSet("marines").addNewCrew("LobsterCombatant_CombatLobster",1.125f,1.5f,10,0);
    crewReplacer_Main.getJob("raiding_marines").addNewCrew("LobsterCombatant_CombatLobster",1.25f,2,10,0);
}
[/code]
some things to note:
    1) 'getCrewSet' works the same as 'getJob', but only for crewSets. same with 'addNewCrew'.
    2) I gave my combat lobsters different stats. this is important for this tutorial, but is not required at all.
    3) because the job 'raiding_marines' uses the crew set 'marines', my lobsters stats will be overwritten by my crew set.
       don't worry, there is a way around this, in the next section.

also, if you want to check if this worked, you can always simply remove the line adding your 'crew' to a certain 'job', and then go and see your 'crew' in action again.
[/spoiler]
[spoiler=load priority and blacklists, and how they work]
somethings to note:
    1) a 'BlackListCrew' is a special thing that can be added to 'job's and 'crewSet's the prevents a crew from being entered into a 'job'/'crewSet'
    2) 'load priority' represents how must crew replacer wants to respect the inputted 'crew' / 'BlackListCrew'.
now, to start, lets let my 'combat lobster' have its special stats when raiding again.
[code]
    @Override
    public void onApplicationLoad() {
        crewReplacer_Main.getCrewSet("marines").addNewCrew("LobsterCombatant_CombatLobster",1.125f,1.5f,10,0);
        crewReplacer_Main.getJob("raiding_marines").addNewCrew("LobsterCombatant_CombatLobster",1.25f,2,10,1);
    }
[/code]
what did i do here?
    1) I increased the 'load priority' of the crew I was adding to 'raiding_marines' from 0 to 1.
what did that do? it makes it so when crew replacer organizing and applys data from the crew sets, it will respect the 'crew' I added to the 'raiding_marines' job more then the one i added to the 'marines' 'crewSet'.
so long as my 'load priority' on my 'job' is higher then the one on my 'crewSet', my jobs 'crew' will not be overwritten by the 'crewSet'.
this also apply to other someone might try to add the same 'crew' to this job. this is useful when 2 moders add the same commodity to the same job, as it will no longer be dependent on load order to determine what 'crew' is accepted into the 'job'

now onto blacklists
[code]
@Override
public void onApplicationLoad() {
    crewReplacer_Main.getCrewSet("marines").addNewCrew("LobsterCombatant_CombatLobster",1.125f,1.5f,10,0);
    crewReplacer_Main.getJob("raiding_marines").addNewCrew("LobsterCombatant_CombatLobster",1.25f,2,10,1);
    crewReplacer_Main.getJob("Mission_hijack_marines").addBlackListCrew("LobsterCombatant_CombatLobster",1);
}
[/code]
so what happened here?
    1) I added a new line of code, that gets the job 'Mission_hijack_marines' and blacklists my 'combat lobster' from doing this job, at a 'load priority' of 1.
       this is important, because the crewSet "marines" includes the job "Mission_hijack_marines". but i don't want my lobsters to be able to do this job (on account of them being so cute and cuddly that they would draw to mush of a crowd and make it hard to steal anything, let alone a starship), but i do want them to use the 'marine' 'crew set'

keep in mind: if you are ever doing anything when something might effect a 'crew' in a given 'job' more then once, make sure the thing you want to keep has the highest 'load priority' to make sure no issues happen.
[/spoiler]
[spoiler=how to use crew replaces features, only if crew replacer is present (as such allowing one to use this mod without having it as a dependency)]
so, a common compliant i hear about crew replacer, is the fact in order to use it one needs to have it as a dependency. and i understand the dislike of that, as dependency suck.
so let me show you a 2 ways around this. one is in one easy step, and only works if your only crewReplacer based import is 'data.scripts.crewReplacer_Main'.
the other is in 3 easy steps, and always works.
pick your poison as it were
[spoiler=in one easy step]
1) add a if statement preventing code from running provided the 'crewReplacer' mod is not loaded.
[code]
    @Override
    public void onApplicationLoad() {
        if (Global.getSettings().getModManager().isModEnabled("aaacrew_replacer")) {
            crewReplacer_Main.getCrewSet("marines").addNewCrew("LobsterCombatant_CombatLobster",1.125f,1.5f,10,0);
            crewReplacer_Main.getJob("raiding_marines").addNewCrew("LobsterCombatant_CombatLobster",1.25f,2,10,1);
            crewReplacer_Main.getJob("Mission_hijack_marines").addBlackListCrew("LobsterCombatant_CombatLobster",1);
        }
    }
[/code]
and yes, it feels weird that this works for me to.
[/spoiler]
[spoiler=in 3 easy steps]
1) create a new class. you can call it whatever you want, but it needs to have at least one static function.
[code]
public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){

    }
}
[/code]
2) move all your crew replacer code into the newly created static function.
[code]
public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){
        crewReplacer_Main.getCrewSet("marines").addNewCrew("LobsterCombatant_CombatLobster",1.125f,1.5f,10,0);
        crewReplacer_Main.getJob("raiding_marines").addNewCrew("LobsterCombatant_CombatLobster",1.25f,2,10,1);
        crewReplacer_Main.getJob("Mission_hijack_marines").addBlackListCrew("LobsterCombatant_CombatLobster",1);
    }
}
[/code]
3) make it so the game only runs your function when crew replacer is present
[code]
@Override
public void onApplicationLoad() {
    if (Global.getSettings().getModManager().isModEnabled("aaacrew_replacer")) {
        LobsterCombatant_CrewReplacerCompatibility.apply();
    }
}
[/code]
this should -always- work. so long as you are not running crew replacer anywere else.
some notes also:
in step 3, yes it is required to have the if statement be outside of the class were you are running crew replacer stuff.
if that class is even loaded and you don't have crew replacer, it will try to import all the crew replacer stuff, and crash.
also, please name keep in mind the classname should likely not be 'LobsterCombatant_CrewReplacerCompatibility'. 'LobsterCombatant' is the name of the mod im making for the purposes of this tutorial.
[/spoiler]
[/spoiler]
[/spoiler]
[spoiler=advanced]
[spoiler=a overview of what a 'custom crew' is]
so you might be wondering 'what is a custom crew, and why is this the 'advanced' section'?
well, its relatively simple.
a 'custom crew' is a crewReplacer_Crew that has one or more of its functions overwritten, with the goal of changing a crew in some way.
as a example: in the AI-Retrofits mod, i make it so 'salvage robots' operate better if there is a 'AI-Core' of some type in the players cargo bay.
the ability to do that is possible because i overwrite the function that determines the 'power' of each crew.
as for why this is in the advanced section? well this is something crew replacer is built for... its no were near as simple as just the basic section. you will understand soon.
if all you want is to have a commodity act as a 'crew' in a 'job' with non changing stats, please look to the basic section for how to accomplish this.
if you want to do something, and am unsure if its even possible?
well, here you go.
[/spoiler]
[spoiler=a short description of the safety's installed in crew replacer to make 'custom crew' more stable]
because we are going to be modifying the 'crewReplacer_Crew' class here, you might be worryed about doing something to crash the game here.
please don't worry to mush about that. the 'crewReplacer_Job' class (wish should be the only class the looks at any of the functions of the crewReplacer_Crew class) has very robust handling of the 'crewReplacer_Crew' class. with lots of 'try{}catch(){}' statements.
in a case were anything a 'crew' did causes a crash, it should output some thing to the log. and 'crewReplacer_Job' will simply treat your crew like it does not exist.
[/spoiler]
[spoiler=how each function of a 'custom crew' works]
so, before anything, i would like to link a link to both my [url=https://github.com/Alaricdragon/Crew_Replacer/blob/master/jars/src/data/scripts/crewReplacer_Crew.java]crewReplacer_Crew class[/url] and my [url=https://github.com/Alaricdragon/Crew_Replacer/blob/master/jars/src/desing/documentation/classes/crewReplacer_Crew]crewReplacer_Crew documentation[/url] on github.
please feel free to reference the 2 links there at any time to learn more about this class we are going to be modifying.
well i will try to keep this tutorial up to date, i might forget sometimes, so its important to be able to go into the documentation and look yourself if you feel like something is not working right.
now, in order to create a custom crew, we are going to need to overwrite the functions of 'crewReplacer_Crew'. so lets look at each one, and i will tell you when you should overwrite wish one, to the best of my ability.
[spoiler=functions you should not overwrite, and there functions.]
first of all, i would like to talk about some functions that are eather worthless to overwrite, and some that are -unwise- to overwrite, for whatever reason.
[spoiler=worthless to overwrite]
most functions here are only used to set data sometimes. if you want to overwrite them, there is nothing stopping you.
[spoiler=public void resetExtraData()]
sets the public Object ExtraData to null.
only called at the end of crewReplacer_Job calculations. most of the time, at the loss calculations.
[/spoiler]
[spoiler=public void setExtraData(Object newData)]
sets the public Object ExtraData to newData.
tries to be called as early as possible in crewReplacer_Job calculations, but when can vary (if its used at all)
[/spoiler]
[spoiler=public boolean hasTag(String tag)]
just checks if this 'crew' has a tag.
tags are not used in crew replacer. they are for users and intercore interactions.
[/spoiler]
[spoiler=public void AddTag(String tag)]
adds a tag to this 'crew'.
tags are not used in crew replacer. they are for users and intercore interactions.
[/spoiler]
[spoiler=public void RemoveTag(String tag)]
removes a tag from this crew
tags are not used in crew replacer. they are for users and intercore interactions.
[/spoiler]
[/spoiler]
[spoiler=functions that are outdated, and you should ignore]
[spoiler=public void removeCrew(CampaignFleetAPI fleet,float CrewToLost)]
just calls removeCrew(CargoAPI cargo,float CrewToLose)
might remove someday.
[/spoiler]
[spoiler=public float getCrewInFleet(CampaignFleetAPI fleet)]
calls getCrewInCargo(CargoAPI cargo)
might remove someday.
[/spoiler]
[spoiler=public float getCrewPowerInFleet(CampaignFleetAPI fleet)]
calls getCrewPowerInCargo(CargoAPI cargo)
might remove someday.
[/spoiler]
[/spoiler]
[spoiler=functions you should never overwrite ever please don't you will break something]
[spoiler=public float getCargoSpacePerItem(CargoAPI cargo)]
this is one of the many functions related to cargo / fuel / personnel use.
please don't tamper with them. they will not change how mush cargo / fuel / personnel space a given crew uses. they are simply used in internal calculations, as apposed to something hard coded to help me not add ways to change cargo, fuel, or personnel space latter.
[/spoiler]
[spoiler=public float getCargoSpaceUse(CargoAPI cargo, float amountOfCrew)]
this is one of the many functions related to cargo / fuel / personnel use.
please don't tamper with them. they will not change how mush cargo / fuel / personnel space a given crew uses. they are simply used in internal calculations, as apposed to something hard coded to help me not add ways to change cargo, fuel, or personnel space latter.
[/spoiler]
[spoiler=public float getCargoSpaceUse(CargoAPI cargo)]
this is one of the many functions related to cargo / fuel / personnel use.
please don't tamper with them. they will not change how mush cargo / fuel / personnel space a given crew uses. they are simply used in internal calculations, as apposed to something hard coded to help me not add ways to change cargo, fuel, or personnel space latter.
[/spoiler]
[spoiler=public float getFuelSpacePerItem(CargoAPI cargo)]
this is one of the many functions related to cargo / fuel / personnel use.
please don't tamper with them. they will not change how mush cargo / fuel / personnel space a given crew uses. they are simply used in internal calculations, as apposed to something hard coded to help me not add ways to change cargo, fuel, or personnel space latter.
[/spoiler]
[spoiler=public float getFuelSpaceUse(CargoAPI cargo, float amountOfCrew)]
this is one of the many functions related to cargo / fuel / personnel use.
please don't tamper with them. they will not change how mush cargo / fuel / personnel space a given crew uses. they are simply used in internal calculations, as apposed to something hard coded to help me not add ways to change cargo, fuel, or personnel space latter.
[/spoiler]
[spoiler=public float getFuelSpaceUse(CargoAPI cargo)]
this is one of the many functions related to cargo / fuel / personnel use.
please don't tamper with them. they will not change how mush cargo / fuel / personnel space a given crew uses. they are simply used in internal calculations, as apposed to something hard coded to help me not add ways to change cargo, fuel, or personnel space latter.
[/spoiler]
[spoiler=public float getCrewSpacePerItem(CargoAPI cargo)]
this is one of the many functions related to cargo / fuel / personnel use.
please don't tamper with them. they will not change how mush cargo / fuel / personnel space a given crew uses. they are simply used in internal calculations, as apposed to something hard coded to help me not add ways to change cargo, fuel, or personnel space latter.
[/spoiler]
[spoiler=public float getCrewSpaceUse(CargoAPI cargo, float amountOfCrew)]
this is one of the many functions related to cargo / fuel / personnel use.
please don't tamper with them. they will not change how mush cargo / fuel / personnel space a given crew uses. they are simply used in internal calculations, as apposed to something hard coded to help me not add ways to change cargo, fuel, or personnel space latter.
[/spoiler]
[spoiler=public float getCrewSpaceUse(CargoAPI cargo)]
this is one of the many functions related to cargo / fuel / personnel use.
please don't tamper with them. they will not change how mush cargo / fuel / personnel space a given crew uses. they are simply used in internal calculations, as apposed to something hard coded to help me not add ways to change cargo, fuel, or personnel space latter.
[/spoiler]
[/spoiler]
[spoiler=public float getCrewToLose(CargoAPI cargo,float crewUsed,float crewLost)]
inputs:
cargo: the cargo being used.
crewUsed: the number of this 'crew' that were randomly selected to do this task.
crewLost: the number of this 'crew' that crewReplacer job has set to be lost.

output:
the number of crew that will be lost in this calculation.

default output:
just outputs the inputted 'crewLost' variable.

when its ran:
just after crew losses are calculated.
before removeCrew(cargo, CrewToLost) is ran.

uses:
this function lets a user customize how many of your own crew are lost in calculations.
all other functions will respect changes made in this function.
[/spoiler]
[spoiler=public void removeCrew(CargoAPI cargo,float CrewToLost)]
inputs:
cargo: the cargo being used.
CrewToLost: the amount of crew that are calculated to be lost.

output:
null. removes this 'crew' from the inputted cargo cargo.

default output:
--

when its ran:
this is the last thing ran when calculating what crew to remove from the players cargo bay.

uses:
this can be used to change what is removed from the used cargo bay. (for example, swapping your losses with another commodity that's not a crew)
best used with 'displayCrewLost(CargoAPI cargo,float numberOfItems, TextPanelAPI text)' because said function wont respect changes made in this one.
[/spoiler]
[spoiler=public float getCrewInCargo(CargoAPI cargo)]
inputs:
cargo: the cargo used

output:
the number of 'crew' that crewReplacer will think or in the cargo (of this type)

default output:
cargo.getCommodityQuantity(name);

when its ran:
any time the game needs to get the amount of crew in your cargo bay.
(like when its getting the total crew power in a job, or when its getting what crew are doing a job.)

uses:
modifying this value can be usefull when you want, for example, the game to think you have more / less crew then you do. or for more complecated 'losses' systems (see examples: 'a 'crew' named dave. the legendary doom pirate (with HP, and very high stats)', 'a 'crew' that's a starship hullmod')
all other functions will respect changes made with this function.
[/spoiler]
[spoiler=public float getCrewPowerInCargo(CargoAPI cargo)]
inputs:
cargo: the cargo used.

output:
the amount of crew power available in this cargo.

default output:
getCrewInCargo(cargo) * getCrewPower(cargo);

when its ran:
any time crew replacer needs to see how mush 'power' is available for a job. so a lot.

uses:
best used when you want to make a static increase to the available crew power. (like say, +200 from a skill bonus or something)
all other functions respect changes made to this one.
[/spoiler]
[spoiler=public String getDisplayName(CargoAPI cargo)]
inputs:
cargo: the cargo used.

output:
the 'name' of this crew. the one the player sees.

default output:
Global.getSector().getEconomy().getCommoditySpec(name).getName();

when its ran:
any time the game needs to display the 'name' of a crew to the user (like displaying losses.)

uses:
changing this is useful when you want your 'crew' to have a different name, for some reason.
also useful if your crew is not a commodity.
all other functions respect changes made to this one
[/spoiler]
[spoiler=public String getCrewIcon(CargoAPI cargo)]
inputs:
cargo: the cargo used

output:
the name of the 'icon' that is displayed besides this 'crew'.

default output:
Global.getSector().getEconomy().getCommoditySpec(name).getIconName();

when its ran:
only in DisplayedCrewNumbers(CargoAPI cargo,float numberOfItems, TextPanelAPI text)

uses:
changing this function can be useful if you want to change the commodity icon that your crew uses to something other then itself.
(note: if you are looking to replace the image of something with something not a 'icon', i suggest modifying DisplayCrewNumbers in some way)
all other functions respect changes made to this one.
[/spoiler]
[spoiler=public float getCrewPower(CargoAPI cargo)]
inputs:
cargo: the cargo used

output:
the amount of power per crew.

default output:
crewPower

when its ran:
this function is ran in 'getCrewPowerInCargo(CargoAPI cargo)'

uses:
changing this function is amazing for changing how mush 'crewPower' your 'crew' has dynamically.
all other functions respect changes made to this one
[/spoiler]
[spoiler=public float getCrewDefence(CargoAPI cargo)]
inputs:
cargo: the cargo used

output:
the amount of 'crewDefence' each crew has

default output:
crewDefence

when its ran:
its ran when calculating what crew should be lost.

uses:
changing this function is amazing for changing how mush 'crewDefence' your 'crew' has dynamically.
all other functions respect changes made to this one
[/spoiler]
[spoiler=public void displayCrewAvailable(CargoAPI cargo, float numberOfItems, TextPanelAPI text)]
inputs:
cargo: the cargo used.
numberOfItems: the number of 'crew' of this type that the game calculates are in the cargo
text: the text API used for displays.

output:
null. displays the amount of crew available when called.

default output:
null. runs DisplayedCrewNumbers(cargo,numberOfItems,text);

when its ran:
any time a crewReplacerJob wants to display the amount of crew available.

uses:
changing this function is useful whenever you need a special display for the amount of crew available to you.
also useful when your 'crew' needs different icons for displaying crew available VS crew lost.
if you want to change both this function and 'displayCrewLost', look into changing 'DisplayCrewNumbers' instead, as both functions call it be default.
all other functions respect the changes made to this function
[/spoiler]
[spoiler=public void displayCrewLost(CargoAPI cargo,float numberOfItems, TextPanelAPI text)]
inputs:
cargo: the cargo used.
numberOfItems: the number of 'crew' of this type that the game calculates have been lost in this operation, wahtever it might be.
text: the text API used for displays.

output:
null. displays the amount of crew lost when called.

default output:
null. runs DisplayedCrewNumbers(cargo,numberOfItems,text);

when its ran:
whenever a crewReplacerJob wants to display the number of crew lost.

uses:
changing this function is useful whenever you need a special display for the amount of crew lost in a operation.
also useful when your 'crew' needs different icons for displaying crew available VS crew lost.
if you want to change both this function and 'displayCrewAvailable', look into changing 'DisplayCrewNumbers' instead, as both functions call it be default.
all other functions respect the changes made to this function
[/spoiler]
[spoiler=public void DisplayedCrewNumbers(CargoAPI cargo,float numberOfItems, TextPanelAPI text)]
inputs:
cargo: the cargo used.
numberOfItems: the number of 'crew' that you want to be displayed.
text: the text API used for displays.

output:
null. creates a display showing a 'icon', as well as the inputted number of crew.

default output:
null. runs like 15 lines of code in its display. includes the function: 'getDisplayName(cargo)' and 'getCrewIcon(cargo)'

when its ran:
only in 'displayCrewAvailable' and 'displayCrewLost'

uses:
changing this function is useful when you want to change both the 'displayCrewAvailable' and 'displayCrewLost' displays.
also useful to change this when you need a none icon image for your 'crew'.
all functions respect this one
[/spoiler]
[/spoiler]
[spoiler=how to add your new 'custom crew' to a 'job']
there is a function in 'job's and 'crew set's just for this.
'.addCrew(crewReplacer_Crew);'
however, you will need to initialize the data first.
please note, all examples going forward will be useing the '3 step' compatibility process, because i want to encourage its use.
example:
[code]
public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){
        crewReplacer_Crew Crew = new CrewReplacer_CrewType_crew();
        Crew.name = "LobsterCombatant_CombatLobster";
        Crew.crewPower = 1.2f;
        Crew.crewDefence = 1.2f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 1;
        crewReplacer_Main.getJob("raiding_marines").addCrew(Crew);


        Crew = new CrewReplacer_CrewType_crew();
        Crew.name = "LobsterCombatant_CombatLobster";
        Crew.crewPower = 1.1f;
        Crew.crewDefence = 1.1f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 0;
        crewReplacer_Main.getCrewSet("marines").addCrew(Crew);
    }
    }
[/code]
please ignore the 'CrewReplacer_CrewType_crew'. its mostly junk data from crewReplacer, but it is technically a custom crew.
please note how i inputted all the data for the 'crew' manually. yes it is required right now. because i was having issues. please don't judge me when i get around to fixing it i will change this part of the tutorial
lastly, note that i created a new class when i wanted to add it to a crewSet, with a different priority. its important that you don't just change the data on the old class then add it again because of the way java works with classes. doing so causes a change in both classes, so they would always have the same stats. but this lets us have different stats.
[/spoiler]
[spoiler=examples]
here im going to walk you though some examples of creating 'custom crew'. feel free to read what you want.
[spoiler=a 'crew' with more power when there is 'volatiles' in the cargo bay.]
so the way i see this, there is a few ways i could handle something like this.
also, as we all know, Lobsters love to eat gasses that we use to make industrial levels of antimatter, so im using them as examples.
[spoiler=adding a 'static' amount of power]
now, I think i only need one function here, as this is relatively simple.
[code]
public class LobsterCombatant_CustomCrew_Volatile_StaticBoost extends crewReplacer_Crew {
    @Override
    public float getCrewPowerInCargo(CargoAPI cargo) {
        int bonus = (int)Math.min(getCrewInCargo(cargo),cargo.getCommodityQuantity("volatiles"));
        bonus = (int)Math.min(bonus,250);
        return super.getCrewPowerInCargo(cargo)+bonus;
    }
}
[/code]
I made sure that the max number of power i could add was caped to 250, because i feel like thats a good value.
[/spoiler]
[spoiler=increasing the crew power of each crew]
so, for this, in theory i could do this with only one function (getCrewPower), but im going to use 2 (getCrewPower and getCrewDefence).
why? because when crewPower and crewDefence are not the same value, it can effect crew losses.
[code]
import data.scripts.crewReplacer_Crew;
public class LobsterCombatant_CustomCrew_Volatile_MultiBoost extends crewReplacer_Crew {
    @Override
    public float getCrewPower(CargoAPI cargo) {
        float multi = 1;
        if (cargo.getCommodityQuantity("volatiles") != 0){
            multi = 1.25f;
        }
        return super.getCrewPower(cargo)*multi;
    }

    @Override
    public float getCrewDefence(CargoAPI cargo) {
        float multi = 1;
        if (cargo.getCommodityQuantity("volatiles") != 0){
            multi = 1.25f;
        }
        return super.getCrewDefence(cargo) * multi;
    }
}
[/code]
so the 2 functions here are effectively the same, but one gets crewPower and the other crewDefence.
still quite cool.
[/spoiler]
now that out lobsters can be well fed on the job, its time to give them a job.
[code]
public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){
        crewReplacer_Crew Crew = new LobsterCombatant_CustomCrew_Volatile_MultiBoost();
        Crew.name = "LobsterCombatant_CombatLobster";
        Crew.crewPower = 1.2f;
        Crew.crewDefence = 1.2f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 1;
        crewReplacer_Main.getJob("raiding_marines").addCrew(Crew);

        Crew = new LobsterCombatant_CustomCrew_Volatile_StaticBoost();
        Crew.name = "LobsterCombatant_CombatLobster";
        Crew.crewPower = 1.25f;
        Crew.crewDefence = 1.25f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 0;
        crewReplacer_Main.getCrewSet("marines").addCrew(Crew);
    }
}
[/code]
and now we can watch out happy lobsters play around in volatiles in there off time, and work harder in there on time =)
[/spoiler]
[spoiler=a 'crew' that's available amount is dependent on how many 'marines' you have in your cargo bay]
so, i think i can do this with only one function. should be interesting.
[code]
public class LobsterCombatant_CustomCrew_ReqMarines extends crewReplacer_Crew {
    @Override
    public float getCrewInCargo(CargoAPI cargo) {
        return Math.min(super.getCrewInCargo(cargo), cargo.getCommodityQuantity("marines"));
    }
}
[/code]
so, rather simple. im just capping the number of available crew, to the number of marines. relatively simple.
now, for implementing it
[code]

public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){
        crewReplacer_Crew Crew = new LobsterCombatant_CustomCrew_ReqMarines();
        Crew.name = "hand_weapons";
        Crew.crewPower = 0.2f;
        Crew.crewDefence = 5f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 0;
        crewReplacer_Main.getCrewSet("heavy_machinery").addCrew(Crew);
    }
}
[/code]
so, same as last time, im just running it in my apply function that i run onApplicationLoad() in my mod plugin.
some things that you might notice:
'hand_weapons'. this refers to 'Heavy Armaments'. i guess the item had a change in development.
the crew power and crew defence. they are way way way off. a armament counts as 1/5 a normal crew, but takes 1/25 the normal losses it should.
I think its reasonable. i am making the 'Heavy Armaments' work in 'heavy_machinery' jobs. (like salvaging, or founding a market).
it makes a lot of sense to me that well its possible to use guns in such a way, it would not be very effective.
at the same time, having losses be equal to the power seems wrong. 'Heavy Armaments' are costly, and are probably not firing point blank? so very very low losses for them.
[/spoiler]
[spoiler=a 'crew' that when 'ore' is available, 'ore' is lost when this 'crew' should have been]
something interesting. but simple.
this time, i cant just do this with a single function. i think im going to need 2.
[code]
public class LobsterCombatant_CustomCrew_lossOre extends crewReplacer_Crew {
    float oreLost=0;
    @Override
    public void removeCrew(CargoAPI cargo, float CrewToLost) {
        oreLost = getOreLost(cargo, CrewToLost);
        cargo.removeCommodity("ore",oreLost);
        super.removeCrew(cargo, CrewToLost-oreLost);
    }

    @Override
    public void displayCrewLost(CargoAPI cargo, float numberOfItems, TextPanelAPI text) {
        String displayName = getDisplayName(cargo);

        TooltipMakerAPI tt = text.beginTooltip();
        TooltipMakerAPI iwt = tt.beginImageWithText(getCrewIcon(cargo), 24);
        String numberStr = (int) numberOfItems-oreLost + "";
        LabelAPI label = iwt.addPara(numberStr + " " + displayName, 0, Misc.getHighlightColor(), numberStr);
        tt.addImageWithText(0);
        text.addTooltip();


        displayName = Global.getSector().getEconomy().getCommoditySpec("ore").getName();

        tt = text.beginTooltip();
        iwt = tt.beginImageWithText(getCrewIcon(cargo), 24);
        numberStr = (int) oreLost + "";
        label = iwt.addPara(numberStr + " " + displayName, 0, Misc.getHighlightColor(), numberStr);
        tt.addImageWithText(0);
        text.addTooltip();
    }
    public float getOreLost(CargoAPI cargo, float CrewToLost){
        return Math.min(CrewToLost*0.5f,cargo.getCommodityQuantity("ore"));
    }
}
[/code]
ok, so that's quite a lot, so lets break this down.
1) the removeCrew function is the same as normal, but it saves a number called 'ore lost', and makes us lose less of our 'crew'.
2) the 'displayCrewLost' function. its a bit diffrent, in that it displays our lost 'crew' and the number of ore lost. I did this by just coping the code from the base crewReplacer_Crew.displayCrewNumbers function and running it twice. once for each commodity.
3) the function 'getOreLost'. i put this here as a function, so its easier to edit, and i can find it easily. please don't judge me. as for the function itself.. you can see it caps the amount of ore lost to 50% of crew lost. thats because i dont feel likes its right to have some type of infinity revive with ore. so we still lose crew, just more ore then normal.

some other notes:
the 2 functions i picked to override. the first one i chose becuase i was applying another loss. i would have picked 'getCrewToLose' if i was only modifying the amount of crew lost, and not making another thing lost. doing so would also remove the requirement of editing the display.
the second one, i chose it because im only doing things to the amount of crew lost. and also adding a second thing to lose. i prefure to edit 'displayCrewNumbers', but thats not the right chose here.

and now, as always, for the implementation
[code]
public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){
        crewReplacer_Crew Crew = new LobsterCombatant_CustomCrew_lossOre();
        Crew.name = "crew";
        Crew.crewPower = 1f;
        Crew.crewDefence = 1f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 1;
        crewReplacer_Main.getJob("salvage_crew").addCrew(Crew);

    }
}
[/code]
so just like the last few. but i did do some things differently.
for one, i am replacing 'crew' from one of the vanilla jobs. so i set the crewLoadPriority to 1.
as for why the crew are being lost less because they have rocks?
its because they eat them.
why do you think crew deliver so mush ore when salvaging?
[/spoiler]
[spoiler=a 'crew' that has a XP system (like marines)]
im only doing this because, like 3 people have asked. i made this possible, and now im going to show you how to do so. but fist some notes:
the examples im going to show you will only work for 'crew' that work in the 'raiding_marines' job. this job has accuses to some 'extra data' that's only present there.
if you want XP to be gained from doing other things? you will need to figger that out yourself.

now, unlike all the other jobs, this will NOT be easy. we will need to override 6 functions, and work with a group of listeners and plugins to update the XP as you get more of your 'crew'. you will also require a custom memory thingymabob to store the crew XP data, as crew replacer cannot store such data.
also, i might add a quick in built custom crew to crew replacer at some ponit that handles all this hard stuff for you. not for a while though.
[spoiler=if i did do that, i would put a short tutorial here]
sorry. not yet.
...
i could rick roll people here.
[/spoiler]
[spoiler=notes on the XP system]
so, i need to write this section for the code to make sense.
the XP system is going to be structured like so:
1) the max amount of XP you can have will be capped by the amount of crew you have.
    -this is to mimic the way how marine XP works. its not an exact copy, because im lazy, but its something
    -this also lets has have the cool thing starsector does were the XP of our crew effectively lowers when we add more crew, and increases when we remove crew. so thats cool.
    -also, this lets has run the equadtion xp/crew amount to determin the 'effective xp' of our crew ('effective xp' is just the number we multiply the bonus damage/defence with). becuase its caped, this number will never be more then 1.
2) XP is going to be stored in starsectors 'memory'
    -I did this so its easier to get the XP data from wherever you might need it
3) the 'memory key' i use to get the XP is "$LobsterCombatant_LobsterXP". if you want to make this yourself, please change this value. or you will likely have compatibility issues with anyone else who also refuses to change this value.
3) I attempted to keep the xp system as close as possible to the way marines work. but like, I didn't look it up because im lazy. so there might be some funny things going on.
[/spoiler]
[spoiler=custom crew class]
[code]
public class LobsterCombatant_CustomCrew_XPSystem extends crewReplacer_Crew {

    private float crewUsedTemp;
    private float ratio = 0;
    private float crewLossMultiTemp = 1;
    private float maxDef = 0.2f;
    private float maxPower = 1f;
    private final static String memoryKey="$LobsterCombatant_LobsterXP";
    public void addXP(float xp,CargoAPI cargo){
        try {
            xp += Global.getSector().getMemory().getFloat(memoryKey);
            xp = Math.min(xp, getCrewInCargo(cargo));
            Global.getSector().getMemory().set(memoryKey, xp);
        }catch (Exception e){
        }
    }
    public float getXP(CargoAPI cargo){
        return Math.min(Global.getSector().getMemory().getFloat(memoryKey),getCrewInCargo(cargo));
    }
    public float getEffectiveXP(float xp,CargoAPI cargo){
        float crew = getCrewInCargo(cargo);
        if (crew == 0) return 0f;
        return xp/crew;
    }
    public float getXPDefneceMulti(float xp, CargoAPI cargo){
        return 1 + (getEffectiveXP(xp,cargo) * maxDef);
    }
    public float getXPPowerMulti(float xp, CargoAPI cargo){
        return 1 + (getEffectiveXP(xp,cargo) * maxPower);
    }
    public float getCrewUsedRatio(CargoAPI cargo, float crewUsed){
        Object[] ObjectTemp = (Object[])ExtraData;
        float temp = crewUsed*getCrewPower(cargo);
        ratio = (float)Math.floor(temp) / (int)ObjectTemp[1];
        return ratio;
    }
    @Override
    public float getCrewDefence(CargoAPI cargo) {
        return super.getCrewDefence(cargo) * getXPDefneceMulti(getXP(cargo),cargo);
    }

    @Override
    public float getCrewPower(CargoAPI cargo) {
        return super.getCrewPower(cargo) * getXPPowerMulti(getXP(cargo),cargo);
    }

    @Override
    public float getCrewToLose(CargoAPI cargo, float crewUsed, float crewLost) {
        float temp = super.getCrewToLose(cargo, crewUsed, crewLost);
        crewUsedTemp = temp;
        return temp;
    }

    @Override
    public void removeCrew(CargoAPI cargo, float CrewToLost) {
        super.removeCrew(cargo, CrewToLost);

        float CrewUsed = crewUsedTemp;
        //crewLossMultiTemp = getXPDefneceMulti(getXP(cargo),cargo);
        if(CrewUsed == 0){
            return;
        }
        try{
            Object[] ObjectTemp = (Object[])ExtraData;
            PlayerFleetPersonnelTracker thing = PlayerFleetPersonnelTracker.getInstance();
            GroundRaidObjectivesListener.RaidResultData data = (GroundRaidObjectivesListener.RaidResultData) ObjectTemp[0];

            float xpGain = data.xpGained;
            xpGain *= thing.XP_PER_RAID_MULT;
            if (xpGain < 0) xpGain = 0;
            xpGain *= getCrewUsedRatio(cargo,crewUsedTemp);
            addXP(xpGain,cargo);
        }catch (Exception E){
        }
    }
    @Override
    public void displayCrewAvailable(CargoAPI cargo, float numberOfItems, TextPanelAPI text){
        String displayName = getDisplayName(cargo);

        TooltipMakerAPI tt = text.beginTooltip();
        TooltipMakerAPI iwt = tt.beginImageWithText(getCrewIcon(cargo), 24);
        String numberStr = (int) numberOfItems + "";
        LabelAPI label = iwt.addPara(numberStr + " " + displayName, 0, Misc.getHighlightColor(), numberStr);
        int xpTemp = (int)Math.floor(100 * (getXPPowerMulti(getXP(cargo),cargo) - 1));
        if(xpTemp != 0) {
            String XP = xpTemp+"%";
            iwt.addPara("- strength increase from XP: %s", 0, Misc.getHighlightColor(),XP);
        }
        tt.addImageWithText(0);

        text.addTooltip();
    }
    @Override
    public void displayCrewLost(CargoAPI cargo,float numberOfItems, TextPanelAPI text){
        String displayName = getDisplayName(cargo);

        TooltipMakerAPI tt = text.beginTooltip();
        TooltipMakerAPI iwt = tt.beginImageWithText(getCrewIcon(cargo), 24);
        String numberStr = (int) numberOfItems + "";
        LabelAPI label = iwt.addPara(numberStr + " " + displayName, 0, Misc.getHighlightColor(), numberStr);
        int xpTemp = (int)Math.floor(100 * (getXPDefneceMulti(getXP(cargo),cargo)-1));//(crewLossMultiTemp-1));
        if(xpTemp != 0) {
            String XP = xpTemp+"%";
            iwt.addPara("- loss reduction from XP: %s", 0, Misc.getHighlightColor(),XP);
        }
        tt.addImageWithText(0);

        text.addTooltip();
    }
}
[/code]
so, this is quite a lot to take in. so im going to go over what every single function does and how/ why i added/overwrote it.
first, lets look at the functions i added.
I could have avoided adding the functions if i wanted. i only added then to be more organized.
also, I made it so every function has access to the 'cargo' variable that i put in every function in crewReplacer_crew. this was more out of habit then anything. please dont judge me
1) addXP
    -this function save the amount of xp my crew has.
    -notice how we use math.min with the XP amount and the amount of crew we have? this prevents us from having more XP then crew, wish is importing in the way i designed this.
2) getXP
    -this function returns the amount of XP my crew has.
    -again i use math.min to make sure XP is not grater then the amount of crew i have. this is just me being safe.
3) getEffectiveXP
    -this function gets the 'effective xp' that my crew has. this just turns the XP value into a number between 0 and 1. so i can multiply bonus stats to this value.
    -the 'if(crew == 0)return 0;' is just there to stop an error when i have no XP. because you cant divide something by zero in java.
4) getXPDefneceMulti
    -this function just returns the value i want to multiply my 'defence' by. given however mush XP i have.
5) getXPPowerMulti
    -this function just returns the value i want to multiply my 'power' by. given however mush XP i have.
6) getCrewUsedRatio
    -this function get the ratio of this crew to every other crew used in a raid. this is important for limiting the amount of XP gained to just the amount of this crew used in this combat.
    -regarding 'ExtraData': this is a bit of data i give -some- of my crewReplacer jobs. it simply lets the crew of this job gain accuses to some additional data.
        be very very carefully when accessing this class. i try to record what all bits of 'ExtraData' do, but it does not change the fact that most crewReplacer_Jobs don't have the same 'ExtraData'. trying to accuses a bit of 'ExtraData' that does not exist for a job will result in your crew effectively being missing from the job (do to crash protection).
please note: in theory you could go without any of the 6 added functions. i just added them to make things easyer for myself.
next, lets look at the functions i overwrote.
7) getCrewDefence
    -in this function, i simply multiply the base defence of this crew by the 'getXPDefenceMulti' value. to get the defence bonus from this crew.
8) getCrewPower
    -in this function, i simply multiply the base power of this crew by the 'getXPPowerMulti' value. to get the power bonus from this crew.
9) getCrewToLose
    -the only reason i overrode this function is to store the amount of this crew that was used in the raid. this is useful when we determine the % of the raid that was this crew.
10) removeCrew
    -this function is a mess. but its were we add the newly gained XP to our crew. I chose to do so here because it happens just after we remove our crew. this helps prevent us from having more XP then crew, wish would allow us to have more then a 1X multiply on our XP bonuses.
    -this is were we use the data gathers from getCrewToLoss. you can see it used in the variable 'CrewUsed'. you don't have to use a second variable for this like i did. i just did that to make it a little easier to modify.
    -in regards to the 'PlayerFleetPersonnelTracker'. this is were the base games marine calculations are based (if you ever want to look at them yourself). i got it here to grab the 'XP_PER_RAID_MULT' value from it. because i feel like if this value is changed by settings or something we would also want our crew to change there XP gain, to avoid consistency issues. but that's just my opinion.
    -notice the gained XP we got from the 'ExtraData'? this is the exsact same XP that marines gain in the base game. cool right?
        if you wanted to gain XP a different way, you would need to decide that out on your own. sorry. but i believe in you. you can do it.
    -the rest of it is just me getting the use crew ratio and multiplying the gained XP by that. this is important again, because we dont want to gain a bonch of XP on our guys if they were not even in the raid in the first place.
11) displayCrewAvailable
    -this is just a normal 'display crew numbers' but i also display the bonus crew power (provided the current bonus from XP is at least 1% bonus)
12) displayCrewLost
    -this is just a normal 'display crew numbers' but i also display the bonus crew defence (provided the current bonus from XP is at least 1% bonus)

now, we need to handle the implementation of our crew.
[code]
public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){
        crewReplacer_Crew Crew = new LobsterCombatant_CustomCrew_XPSystem();
        Crew.name = "LobsterCombatant_CombatLobster";
        Crew.crewPower = 1f;
        Crew.crewDefence = 1f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 1;
        crewReplacer_Main.getJob("raiding_marines").addCrew(Crew);
    }
}
I chose the job marines, because its the one that has the 'ExtraData' i built my crew for.
also, i gave this the same stats as marines. just because im very very lazy.
[/code]

this all together, lets us have a rough mimic of the normal marine XP gain and strength system. but one last part is missing.
[/spoiler]
[spoiler=plugin listener thing]
[spoiler=the plugin]
[code]
public class LobsterCombatant_CustomCrew_XP_cargoHandler implements ColonyInteractionListener,
        CommodityTooltipModifier,
        CommodityIconProvider,
        CargoScreenListener {
    public static final String commodity = "LobsterCombatant_CombatLobster";
    private final static String memoryKey = "$LobsterCombatant_LobsterXP";

    @Override
    public int getHandlingPriority(Object params) {
        return 0;
    }

    @Override
    public void reportCargoScreenOpened() {

    }

    @Override
    public void reportPlayerLeftCargoPods(SectorEntityToken entity) {

    }

    @Override
    public void reportSubmarketOpened(SubmarketAPI submarket) {

    }

    @Override
    public void reportPlayerOpenedMarket(MarketAPI market) {

    }

    @Override
    public void reportPlayerClosedMarket(MarketAPI market) {

    }

    @Override
    public void reportPlayerOpenedMarketAndCargoUpdated(MarketAPI market) {

    }


    @Override
    public String getIconName(CargoStackAPI stack) {
        return null;
    }


    @Override
    public void reportPlayerNonMarketTransaction(PlayerMarketTransaction transaction, InteractionDialogAPI dialog) {
        processTransaction();
    }

    @Override
    public void reportPlayerMarketTransaction(PlayerMarketTransaction transaction) {
        processTransaction();
    }

    @Override
    public String getRankIconName(CargoStackAPI stack) {
        if (stack == null || stack.getCargo() == null || stack.getCommodityId() == null || !stack.getCommodityId().equals(commodity) || stack.getCargo().getFleetData() == null || !stack.getCargo().getFleetData().getFleet().isPlayerFleet() || stack.isPickedUp())
            return null;
        int[] thresholds = {25, 50, 75, 100};
        String[] ranks = {"icon_crew_green", "icon_crew_regular", "icon_crew_veteran", "icon_crew_elite"};
        int xp = getEffectiveXPPercent();
        for (int a = 0; a < thresholds.length; a++) {
            if (thresholds[a] >= xp) {
                return Global.getSettings().getSpriteName("ui", ranks[a]);
            }
        }
        return Global.getSettings().getSpriteName("ui", ranks[0]);
    }

    @Override
    public void addSectionAfterPrice(TooltipMakerAPI info, float width, boolean expanded, CargoStackAPI stack) {
        if (stack == null || stack.getCargo() == null || stack.getCommodityId() == null || !stack.getCommodityId().equals(commodity) || stack.getCargo().getFleetData() == null || !stack.getCargo().getFleetData().getFleet().isPlayerFleet() || stack.isPickedUp())
            return;
        float xp = (float) Global.getSector().getMemory().getFloat(memoryKey);
        info.addPara("total XP is: %s", 3, Misc.getHighlightColor(), xp + "");
        info.addPara("current XP is: %s", 3, Misc.getHighlightColor(), getEffectiveXPPercent() + "%");
    }

    public void processTransaction() {
        float xp = Global.getSector().getMemory().getFloat(memoryKey);
        float commoditys = Global.getSector().getPlayerFleet().getCargo().getCommodityQuantity(commodity);
        xp = Math.min(xp, commoditys);
        Global.getSector().getMemory().set(memoryKey, xp);// * -ratio);
    }

    public static int getEffectiveXPPercent() {
        float xp = (float) Global.getSector().getMemory().getFloat(memoryKey);
        float commoditys = Global.getSector().getPlayerFleet().getCargo().getCommodityQuantity(commodity);
        return (int) Math.min(Math.floor((xp * 100) / commoditys), 100);
    }
}
[/code]
so, once again, this is a long one. lots of plugins, lots of functions.
im going to skip explaining the functions i didn't change, because im not using them (implementing an interface requires that i have them around, even when they are doing nothing)
as for the ones i did change:
1)reportPlayerNonMarketTransaction
    -every time this runs, i run 'process transaction'. a function i created, and will explain soon.
    -this runs every time the player adds / removes items from there cargo, and its not a trade (like salvaging, or dropping cargo pods)
2)reportPlayerMarketTransaction
    -every time this runs, i run 'process transaction'. a function i created, and will explain soon.
    -this runs every time the player adds / removes items from there cargo, and its is a trade (like on the open market)
3)getRankIconName
    -this function is more complicated, but the basics of it is that it give the crew an 'icon' at the same XP thresholds as normal marines get there icons. also the same icons marines get.
    -if you want to learn more about how this works, go read my [url=Commodity's and you: a basic tutorial on the complete commodity experience]https://fractalsoftworks.com/forum/index.php?topic=29612.0[/url]
4)addSectionAfterPrice
    -this just displays the amount of XP. both the % of xp, and the total xp number.
    -if you want to learn more about how this works, go read my [url=Commodity's and you: a basic tutorial on the complete commodity experience]https://fractalsoftworks.com/forum/index.php?topic=29612.0[/url]
5)processTransaction
    -this function simply compares the current XP to the amount of this crew you have in your inventory. if you have more XP then this crew, it cuts the xp down. then saves it.
6)getEffectiveXPPercent
    -this just gets the 'effective xp' of this crew, but as a value between 0 and 100.
    -this is only used to display the amount of XP your crew has on your item.
[/spoiler]
[spoiler=implementation]
[code]
@Override
public void onGameLoad(boolean newGame) {
    super.onGameLoad(newGame);
    Global.getSector().getListenerManager().addListener(new LobsterCombatant_CustomCrew_XP_cargoHandler(),true);
    Global.getSector().getGenericPlugins().addPlugin(new LobsterCombatant_CustomCrew_XP_cargoHandler(),true);
}
[/code]
so, this is the normal 'add the listener on game load into starsectors listener manager', but im also doing the same thing with the GenericPlugins.
the reason? some of the interfaces we implemented are listeners, and some are plugins. if you do this, you will also need to add your class to both the plugin manager and listener manager.
[/spoiler]
[/spoiler]
and that's how you do marine like XP on crew.
...
that took me more then a week to do.
[/spoiler]
[spoiler=a 'crew' named dave. the legendary doom pirate (with HP, and very high stats)]
aaa, this is a interesting one. although, this might seem a little ponitless to some.
the reason why i even want to talk about this is rather simple. crew replacer has a issue built into its crew loss system.
when crew replacer calculates losses, it rounds up.
this is fine on its own. to even notice this issue, one would need to be ether messing with some game breaking high stat crew, or be watching very very closely.
this is in addition to the fact that losses are hard caped by the number of crew uses. so its mostly a none issue.
but when it is, its really frustrating. so lets change that. with dave. the legendary doom pirate.

so for this example, let us create a crew, with lets say, 10k power. and 10K defence. easily enough that they should be able to do most anything by themselves.
but lets also give him, lets say, 10K hp. but whats HP? its something i made up just now, and am going to implement in the next crew
[spoiler=dave, the crew]
[code]
public class LobsterCombatant_CustomCrew_DaveTheLegendaryDoomPirate extends crewReplacer_Crew {
    public int maxHP= 10000;
    public String memory = "$LobsterCombatant_DavesHPPercent";
    public String HPGainedMemory = "$LobsterCombatant_TimeSinceDaveHealed";
    float davesLostTemp=0;
    float davesHPLost=0;
    public int getDaves(CargoAPI cargo){
        return (int)cargo.getCommodityQuantity(this.name);
    }
    public void attemptHealing(CargoAPI cargo){
        float hpTemp = Global.getSector().getMemory().getFloat(memory);
        if (hpTemp == 1 || hpTemp == 0){
            Global.getSector().getMemory().set(HPGainedMemory,Global.getSector().getClock().getTimestamp());
            return;
        }
        float days = Global.getSector().getClock().getElapsedDaysSince(Global.getSector().getMemory().getLong(HPGainedMemory));
        if (days < 1) return;
        hpTemp+= (days*0.01);
        hpTemp = Math.min(hpTemp,1);
        Global.getSector().getMemory().set(HPGainedMemory,Global.getSector().getClock().getTimestamp());
        setHP(cargo,hpTemp);
    }
    public float getHP(CargoAPI cargo){
        attemptHealing(cargo);
        float a = Global.getSector().getMemory().getFloat(memory);
        if (a == 0) a = 1;
        a *= getMaxHP(cargo);
        return a;
    }
    public void setHP(CargoAPI cargo,float HP){
        Global.getSector().getMemory().set(memory,HP);
    }
    public float getMaxHP(CargoAPI cargo){
        return maxHP * getDaves(cargo);
    }
    @Override
    public float getCrewInCargo(CargoAPI cargo) {
        return getHP(cargo);
    }

    @Override
    public float getCrewPower(CargoAPI cargo) {
        return this.crewPower*(getDaves(cargo) / getCrewInCargo(cargo));
    }

    @Override
    public float getCrewDefence(CargoAPI cargo) {
        return this.crewDefence*(getDaves(cargo) / getCrewInCargo(cargo));
    }

    @Override
    public void displayCrewLost(CargoAPI cargo, float numberOfItems, TextPanelAPI text) {
        numberOfItems = davesLostTemp;
        String displayName = getDisplayName(cargo);

        TooltipMakerAPI tt = text.beginTooltip();
        TooltipMakerAPI iwt = tt.beginImageWithText(getCrewIcon(cargo), 24);
        String numberStr = (int) numberOfItems + "";
        LabelAPI label = iwt.addPara(numberStr + " " + displayName, 0, Misc.getHighlightColor(), numberStr);
        int hpTemp = (int)Math.floor(100 * davesHPLost);//(crewLossMultiTemp-1));
        if(hpTemp != 0) {
            String HP = hpTemp+"%";
            iwt.addPara("dave's lost %s hp", 0, Misc.getHighlightColor(),HP);
        }
        tt.addImageWithText(0);

        text.addTooltip();
    }

    @Override
    public void displayCrewAvailable(CargoAPI cargo, float numberOfItems, TextPanelAPI text) {
        super.displayCrewAvailable(cargo, getDaves(cargo), text);
    }

    @Override
    public float getCrewToLose(CargoAPI cargo, float crewUsed, float crewLost) {
        float hpLost = 0;
        float hp = getHP(cargo);
        float daves = getDaves(cargo);
        float losses = 0;
        float hpPerDave = maxHP/daves;
        while(crewLost >= hpPerDave && crewLost > 0){
            hp -= Math.min(crewLost,hpPerDave);
            losses++;
            crewLost-=hpPerDave;
            hpLost+=hpPerDave;
        }
        hp-=crewLost;
        hpLost+=crewLost;
        davesHPLost = hpLost / getMaxHP(cargo);
        setHP(cargo,hp / getMaxHP(cargo));
        davesLostTemp = losses;
        return super.getCrewToLose(cargo, crewUsed, crewLost);
    }

    @Override
    public void removeCrew(CargoAPI cargo, float CrewToLost) {
        super.removeCrew(cargo, davesLostTemp);
    }
}
[/code]
so now, let us talk about the functions i put into dave, as well as what i have overwriten.
first, the new functions:
1)getDaves
    -this might seem redundant, but with the way we have overwriten 'getCrewInCargo', i would like a way to get the actual amount of crew in cargo for when we need it
2)attemptHealing
    -this attempts to heal dave. right now its set up to 'remember' the last time dave was healed, and then heal him by 1% of his hp per day.
    -also, the memory is returned when HP is equal to 1 or 0 because that ether means dave is at full hp (and therefore is not healing), or dave is not created. and therefore should not heal, but instead just let the function that gets daves HP set him to max HP.
    -the reason there is a math.min for daves HP is because this is looking at daves % of hp. not the number of hit ponits he has
3)getHP
    -this gets daves total HP. not as a percent value like everything else does, but his true HP number.
    -this runs attemptHealing, to make sure any missed healing always happens just before anything in the class gets daves hp.
    -also, the reason this sets daves HP to 1 if its zero (before the calculation that turns the HP from a percent value that is stored to the his hit point value) is because when the HP variable is first created, it has a value of 0. so this fixes that.
4)setHP
    -this just sets daves hp memory to a value. nice and simple
5)getMaxHP
    -this just gets daves true max hp. although we do have a varuble to manage this, this lets us view that max HP in cases were we have many daves.
     the army of dave. scary.
next, the functions i have overwriten
6)getCrewInCargo
    -you might be confused on this. and i dont blame you.
    what im doing here is simply changing out the amount of 'daves' crewReplacer_Job thinks i have with the number of HP he has. this makes it simple to have dave loes HP instead of himself.
7)getCrewPower
    -this is made necessary by getCrewInCargo being changed. this makes sure that the effective power of 'dave' always remains as it should. even though i have changed the number of 'daves' crewReplacer thinks are present dramatically
8)getCrewDefence
    -this is made necessary by getCrewInCargo being changed. this makes sure that the effective defence of 'dave' always remains as it should. even though i have changed the number of 'daves' crewReplacer thinks are present dramatically
9)displayCrewLost
    -this runs the normal code for 'displayCrewLost' with 2 diffrences:
    1) instead of the inputed number of crew lost (wish would be based around the stats given in functions 6-8) it instead takes a stored varuble, davesLostTemp, that i assing in getCrewToLose
    2) this also outputs the amount of HP dave lost. also set in getCrewToLose.
10)displayCrewAvailable
    -this runs the normal code for 'displayCrewAvailable', but is set to always show the number of 'daves' we have.
    -this is important because of the changes made in getCrewInCargo
11)getCrewToLose
    -what this function does is get the amount of 'daves' that should be lost, as well as get the amount of daves HP that should be lost.
    -this is required, again, because of what i did in function 6-8. so ya.
    -also, the while loop could likely be removed. I put it there thinking i would give each dave his own HP, but decided not to because that would take forever and be past the scope of what im trying to show you.
12)removeCrew
    -the only diffrece here is that we are removing a number of crew equal to davesLostTemp (set in getCrewToLose)
    -you might be wondering, why not move the data from getCrewToLose into this function? simply put, this function runs after displayCrewLost. and i wanted to display the amount of daves HP that was lost as well.

and now for implementing dave
[code]
public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){
        crewReplacer_Crew Crew = new LobsterCombatant_CustomCrew_DaveTheLegendaryDoomPirate();
        Crew.name = "LobsterCombatant_Dave";
        Crew.crewPower = 10000f;
        Crew.crewDefence = 10000f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 1;
        crewReplacer_Main.getJob("raiding_marines").addCrew(Crew);
    }
}
[/code]
yep. that's 10k power and defence. a lot of power.
if we tried this without this type of class, dave would be killed the moment he tried to raid. how very sad =(
also to note: unlike the XP system, dave could work with any crewReplacer_job, as he is not relent on extra data to function

now, there is one thing missing: how are we suppose to know how mush HP dave is at? are we suppose to guess?
[/spoiler]
[spoiler=dave, the plugin]
so, we want a few things. we want dave to know daves HP. this also means, as we are going to view daves HP, we want it to update when we do.
relatively simple. we just need a 'CommodityTooltipModifier'
[code]
public class LobsterCombatant_DavesDescription implements CommodityTooltipModifier {
    public String memory = "$LobsterCombatant_DavesHPPercent";
    public String HPGainedMemory = "$LobsterCombatant_TimeSinceDaveHealed";
    public String crew = "LobsterCombatant_Dave";
    @Override
    public void addSectionAfterPrice(TooltipMakerAPI info, float width, boolean expanded, CargoStackAPI stack) {
        if (!stack.getCommodityId().equals(crew)) return;
        attemptHealing();
        info.addPara("daves currently at %s HP",3, Misc.getHighlightColor(),(int)(Global.getSector().getMemory().getFloat(memory)*100)+"%");
    }
    public void attemptHealing(){
        float hpTemp = Global.getSector().getMemory().getFloat(memory);
        if (hpTemp == 1 || hpTemp == 0){
            Global.getSector().getMemory().set(HPGainedMemory,Global.getSector().getClock().getTimestamp());
            setHP(1);
            return;
        }
        float days = Global.getSector().getClock().getElapsedDaysSince(Global.getSector().getMemory().getLong(HPGainedMemory));
        if (days < 1) return;
        hpTemp+= (days*0.01);
        hpTemp = Math.min(hpTemp,1);
        Global.getSector().getMemory().set(HPGainedMemory,Global.getSector().getClock().getTimestamp());
        setHP(hpTemp);
    }
    public void setHP(float HP){
        Global.getSector().getMemory().set(memory,HP);
    }
}
[/code]
so, lets talk about the functions i have here:
1)addSectionAfterPrice
    -this function simplys runs 'attemptHealing', as well as displays daves HP as a percent.
2)attemptHealing
    -this function is copyed directly from dave's 'crewReplacer_Crew' class, and serves in the same way
3)setHP
    -this function is copyed directly from dave's 'crewReplacer_Crew' class, and serves in the same way

and now to implememt it
[code]
public void onGameLoad(boolean newGame) {
    super.onGameLoad(newGame);
    Global.getSector().getListenerManager().addListener(new LobsterCombatant_DavesDescription());
}
[/code]
again, relatively simple. just add it to the games ListenerManager.
[/spoiler]
[/spoiler]
[spoiler=a 'crew' that's actually just a player skill]
well, this is going to be interesting.
some of you might ask when this could possibly be useful? but that's not the point of this example.
the point of this example is to show you that one can make a 'crew' out of -anything-. there are no limits to what you can use.
im also going to use this example to show you the minimum amount of changes for something like this to function
so, lets get started.
[spoiler=custom crew class]
so, i think i can do this in only 4 functions.
[code]
public class LobsterCombatant_CustomCrew_PlayerSkill extends crewReplacer_Crew {
    @Override
    public float getCrewInCargo(CargoAPI cargo) {
        try {
            if(cargo.getFleetData().getCommander().getStats().getSkillLevel("automated_ships") == 0) return 0f;
            float skill = 20;
            float level = cargo.getFleetData().getCommander().getStats().getLevel();
            skill *= level;
            return skill;
        }catch (Exception e){
            return 0f;
        }
    }

    @Override
    public float getCrewToLose(CargoAPI cargo, float crewUsed, float crewLost) {
        return 0;
    }

    @Override
    public String getCrewIcon(CargoAPI cargo) {
        return Global.getSettings().getSpriteName("systemMap", "mission_indicator");
    }

    @Override
    public String getDisplayName(CargoAPI cargo) {
        return "automated tokens";
    }
}
[/code]
so lets talk about the functions i chose, and what they do.
1) getCrewInCargo
    -I chose this function, because all other functions respect it. from there, i simply got skill level * 20 if you have the 'automated ship' skill.
    -the try-catch loop is just because im a bit lazy today. normally i would use a if statement to find out if the fleet or commanded exist, but not today.
2) getCrewToLose
    -i set this to return zero, because i didn't want to have to deal with losses here. this is suppose to be a demonstration about the minimum required amount of work for a non commodity crew after all.
    -NOTE: you could override 'removeCrew' instead, if you intended this custom crew to have the possibility of losing something
3) getCrewIcon
    -this is important to set up here, as crew replacer will assume that your 'crew' is a commodity, and try to get an icon from that. wish might prevent your crew from being displayed at all. (this is do to crash protection)
4) getDisplayName
    -this is also important to get up here, as crew replacer will assume that your 'crew' is a commodity, and try to get the name from that. wish might prevent your crew from being displayed at all. (this is do to crash protection)
now we just need to worry about the implementation.
[spoiler]
[spoiler=implementation]
[code]
public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){
        crewReplacer_Crew Crew = new LobsterCombatant_CustomCrew_PlayerSkill();
        Crew.name = "LobsterCombatant_AutomatedShipSkillCrew";
        Crew.crewPower = 1f;
        Crew.crewDefence = 1f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 1;
        crewReplacer_Main.getJob("raiding_marines").addCrew(Crew);
    }
}
[/code]
simple enough, but there are some things i would like to note.
first of all, the crew 'name'. you will notice it does not match a commodity. this is because its not a commodity. you could give it a name equal to a commodity, but that can cause compatibility issues if someone wants said commodity to act like a crew.
secondly, i made this crew work the 'raiding_marines' job again. this is because its the only vanilla job that shows what crew you have available, and if you chose to run this, i would like you to see how the crew looks.
[/spoiler]
[/spoiler]
[spoiler=a 'crew' that's a starship hullmod]
well, this is something.
I wanted to demonstrate one of the more confusing things to do with custom crews. so i do hope you are prepared, because this will be.. somewhat simple.
what? no, really. this is just like 'a 'crew' that's actually just a player skill' in practice. well, maybe with a little 'a 'crew' named dave. the legendary doom pirate' thrown in.

but let me give an overview on the construction of this custom crew.
first, I think it would be cool if the 'losses' were converted into ship CR. a bit harder then something like, destroying a ship instead of a commodity, but more fun.
secondly, I think larger ships should contribute more then smaller ships. so i will make it so larger ships have a multiplyer to how mush stats they provide.
lastly, i think that ships that are 2 damaged should not join in. that would not make sense.

so how many functions am i going to need to override to do this?
8. i will need to override 8 functions.
don't worry, i will explain everything.
[spoiler=custom crew class]
[code]
public class LobsterCombatant_CustomCrew_Hullmod extends crewReplacer_Crew {
    public String hullModID = "repair_gantry";
    public float[] powerPerSize = {1,2,4,8};
    public float[] lossesTemp;
    public float HP = 100;
    float crMin = 0.35f;
    public ArrayList<FleetMemberAPI> getFleetMembers(CargoAPI cargo){
        ArrayList<FleetMemberAPI> out = new ArrayList<>();
        for (FleetMemberAPI a : cargo.getFleetData().getMembersListCopy()){
            if(a.getVariant().getHullMods().contains(hullModID) && a.getRepairTracker().getCR() >= crMin) {
                out.add(a);
            }
        }
        return out;
    }
    public float[] getCRLosses(CargoAPI cargo, float numberOfItems,ArrayList<FleetMemberAPI> fleet){
        float[] out = new float[fleet.size()];
        float CRTotal = this.getCrewInCargo(cargo);
        float HPLossPerCR = numberOfItems / CRTotal;
        for (int a = 0; a < fleet.size(); a++) {
            FleetMemberAPI b = fleet.get(a);
            float cr = b.getRepairTracker().getCR();
            float loss = HPLossPerCR*cr;
            out[a] = Math.min(loss,cr);
        }
        return out;
    }
    public float getSizePower(FleetMemberAPI ship){
        String size = ship.getVariant().getHullSpec().getHullSize().name();
        if (size.equals(ShipAPI.HullSize.FRIGATE.name())) return powerPerSize[0];
        if (size.equals(ShipAPI.HullSize.DESTROYER.name())) return powerPerSize[1];
        if (size.equals(ShipAPI.HullSize.CRUISER.name())) return powerPerSize[2];
        if (size.equals(ShipAPI.HullSize.CAPITAL_SHIP.name())) return powerPerSize[3];
        return powerPerSize[1];
    }
    @Override
    public float getCrewInCargo(CargoAPI cargo) {
        try {
            float power = 0;
            for (FleetMemberAPI a : getFleetMembers(cargo)) {
                power += getSizePower(a)*HP*a.getRepairTracker().getCR();
            }
            return power;
        }catch (Exception e){
            return 0f;
        }
    }
    @Override
    public float getCrewDefence(CargoAPI cargo) {
        return super.getCrewDefence(cargo)/HP;
    }

    @Override
    public float getCrewPower(CargoAPI cargo) {
        return super.getCrewPower(cargo)/HP;
    }

    @Override
    public void removeCrew(CargoAPI cargo, float CrewToLost) {
        ArrayList<FleetMemberAPI> fleet = getFleetMembers(cargo);
        for (int a = 0; a < lossesTemp.length; a++){
            fleet.get(a).getRepairTracker().setCR(fleet.get(a).getRepairTracker().getCR() - lossesTemp[a]);
        }
    }

    @Override
    public String getCrewIcon(CargoAPI cargo) {
        return Global.getSettings().getSpriteName("systemMap", "icon_fleet0");
    }

    @Override
    public String getDisplayName(CargoAPI cargo) {
        return "salvage ships";
    }

    @Override
    public void displayCrewAvailable(CargoAPI cargo, float numberOfItems, TextPanelAPI text) {
        numberOfItems = getFleetMembers(cargo).size();
        super.displayCrewAvailable(cargo, numberOfItems, text);
    }

    @Override
    public void displayCrewLost(CargoAPI cargo, float numberOfItems, TextPanelAPI text) {
        ArrayList<FleetMemberAPI> fleet = getFleetMembers(cargo);
        lossesTemp = getCRLosses(cargo,numberOfItems,fleet);
        for (int a = 0; a < lossesTemp.length; a++){
            if (lossesTemp[a] != 0) {
                String displayName = fleet.get(a).getShipName();
                TooltipMakerAPI tt = text.beginTooltip();
                TooltipMakerAPI iwt = tt.beginImageWithText(fleet.get(a).getHullSpec().getSpriteName(), 24);
                String numberStr = (int) (lossesTemp[a]*100) + "%";
                String CRLeft = (int)((fleet.get(a).getRepairTracker().getCR() - lossesTemp[a])*100)+"%";
                LabelAPI label = iwt.addPara("%s lost %s of its CR. it has %s CR remaining", 0, Misc.getHighlightColor(),displayName, numberStr,CRLeft);
                tt.addImageWithText(0);
                text.addTooltip();
            }
        }
    }
}
[/code]
remember when i said it would be simple? its simple in concept.
so lets go over every function i added / edited one by one to find out whats up.
first, the functions i added in
1)getFleetMembers
    -this function gets all members of the players fleet that have the salvage hullmod, and more combat readiness then crMin (a value that's set to 0.35 for this example)
2)getCRLosses
    -this function gets the amount of CR i want to loss in this operation, based on the calculated amount of losses i will be sustaining.
     to do this, i just get the amount of expected losses crew replacer wants me to take, then divide that by the 'hp' of my salvage ships (aka, the total number of HP i calculated in 'getCrewInCargo'). then its just the simple task of making all my ships take that mush cr damage.
3)getSizePower
    -this is just a function to get the a power 'multiplyer' for larger salvage ships. just in case mods are involved. hopefully its simple enough to follow.
now, the functions that i overrided, and why.
4)getCrewInCargo
    -just like 'dave' this will require an HP system of some type, to get the amount of 'CR' loss that we need, we cant just output the number of ships we have. we need something more complicated. like this.
    -the reason im multiplying the numbers by my ships CR is because CR ranges from 0 to 1 (0% cr to 100% cr). so by doing this, its an easy way to make our ships count for less when they are low CR.
    -the reason im multiplying this by getSizePower, is because i want larger ships to provide more 'power' and 'defence'. this is a easy way to do so, when using an HP system.
    -also note: because im modifying the amount of 'crew' i have by my CR, it measn that the 'power' and 'defence' of this 'crew' is what the 'power' would be if the ship had 100% cr. so thats interesting.
5)getCrewDefence
    -here, we just modify the 'defence' by our HP.
    -this is nice, because it plays well with the strangeness we did in 4). effectively, the ship has less total defence when its wounded. also, the ship has more total defence the larger it is
    -also to note: we did not divide this number by the CR or the 'getSizePower' function, as would be proper. again, this is so it increases the total 'defence' the larger and higher HP the ships are.
6)getCrewPower
    -here, we just modify the 'power' by our HP.
    -this is nice, because it plays well with the strangeness we did in 4). effectively, the ship has less total power when its wounded. also, the ship has more total power the larger it is
    -also to note: we did not divide this number by the CR or the 'getSizePower' function, as would be proper. again, this is so it increases the total 'power' the larger and higher HP the ships are.
7)removeCrew
    -this function just sets all the ships CR to be modifyed by something i called 'losses temp'. this is just a variable that i set in displayCrewLost.
8)getCrewIcon
    -I set this to be something diffrent, but i dont like it. i should have used the 'salvage' hullmod icon or something.
    -if you were really really clever, you could just make this icon be the ship icon of one of the players salvage ships, but i don't want to over complicate this any more then i must.
    -also, remember with custom crew that are not a commodity: if you don't override this function, and the game trys to get the icon for this crew, it will cause the crew to not display.
9)getDisplayName
    -i set this to be 'salvage ships'. relatively simple.
    -remember with custom crew that are not a commodity: if you don't override this function, and the game trys to get the name of this crew, it will cause the crew to not display.
10)displayCrewAvailable
    -in this, i just modify the number of displayed crew to be the number of available ships. no need to show that scary 'getCrewInCargo' the game wants us to display. its not reflective of anything the player need to know about after all.
11)displayCrewLost
    -this might look scary, but its just 2 parts.
    -'lossesTemp = getCRLosses(cargo,numberOfItems,fleet);'. this just gets the losses that i want and stores them for latter. this will then be used in the 'remove crew' function.
    -the for loop. normally, i only need to display one line, but if you are doing this, most players will want to know what ships were damaged doing whatever. so i included text to show that, as well as a little image of the ship

well, that was something. onto the last part. the implementation.
[/spoiler]
[spoiler=implementation]
[code]
public class LobsterCombatant_CrewReplacerCompatibility {
    public static void apply(){
        crewReplacer_Crew Crew = new LobsterCombatant_CustomCrew_Hullmod();
        Crew.name = "LobsterCombatant_HullModAttempt";
        Crew.crewPower = 20f;
        Crew.crewDefence = 20f;
        Crew.crewPriority = 10;
        Crew.crewLoadPriority = 1;
        crewReplacer_Main.getJob("salvage_crew").addCrew(Crew);
    }
}
[/code]
there we go. just a normal initialization of our class. nice and simple.
please note: the power and defence of this crew is effected by ship sizes and CR. a ships with 50% cr would get 1/2 the power/defence. larger ships would get a mush larger power and defence.
[/spoiler]
[/spoiler]
[/spoiler]
[/spoiler]
[/spoiler]






[spoiler=how to add a job to crew replacer, and why you would do it]
[/spoiler]
